#column labeled fROIs to assign names appropriately. NOTE that this now takes care of reading
#in the localizer-to-localizer ones too, to facilitate making the supplemental materials.
allSigChange = read.csv(paste(meansig_outputs_folder, 'all_mean_signal_outputs.csv', sep=''))
#FOR NOW: Make a choice whether to do all analyses with top 50 voxels or top 10% voxels
allSigChange = filter(allSigChange, ind_selection_method == 'Top10Percent')
#NEW: Also, screen out the split-half analyses, we'll treat those in their own file since exploratory
allSigChange = filter(allSigChange, !filename %in% c('SplitHalf_RHLfROIs_resp_Jokes_20170904',
'SplitHalf_LangfROIs_resp_Jokes_20170904',
'SplitHalf_MDfROIs_resp_Jokes_20170904',
'SplitHalf_ToMfROIs_resp_Jokes_20170904'))
#(This can be changed to 'Top50Voxels' to see all results with that fROI selection procedure
# List contrast and ROI names so it's not just numbers!!!!! (This ordering comes from the
# standard ordering produced by the 2nd level analyses; we'll arrange differently in the plots)
RHLangROI.Names = c('RPost Temp', 'RAnt Temp', 'RAngG', 'RIFG',      'RMFG',     'RIFG orb');
LangROI.Names = c('LPost Temp', 'LAnt Temp', 'LAngG', 'LIFG',      'LMFG',     'LIFG orb');
MDROI.Names = c('LIFG op',  'RIFG op', 'LMFG',    'RMFG',    'LMFG orb',
'RMFG orb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LPar Inf', 'RPar Inf', 'LPar Sup',
'RPar Sup', 'LACC',   'RACC');
ToMROI.Names = c('DM PFC', 'LTPJ',  'MM PFC', 'PC',
'RTPJ',  'VM PFC', 'RSTS');
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high', 'linear') #Bug solved! I didn't record 'other' (no response) in the toolbox output this time. NBD.
lang.contrasts = c('S','N','S-N')
MD.contrasts = c('H','E','H-E')
ToM.contrasts = c('bel','pho','bel-pho')
#Split the data into groups by fROIs, and rename them as appropriate
RHLang_sigs = data.frame(NULL)
LHLang_sigs = data.frame(NULL)
MD_sigs = data.frame(NULL)
ToM_sigs = data.frame(NULL)
RHLang_sigs = allSigChange %>%
filter(fROIs == 'RHLfROIs')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'RHLang') %>%
ungroup()
LHLang_sigs = allSigChange %>%
filter(fROIs == 'LangfROIs')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'LHLang') %>%
ungroup()
MD_sigs = allSigChange %>%
filter(fROIs == 'MDfROIs')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
MD.contrasts[Contrast]))) %>%
mutate(Group = ifelse(ROI %%2 == 1, 'MDLeft','MDRight')) %>%
ungroup()
ToM_sigs = allSigChange %>%
filter(fROIs == 'ToMfROIS')%>% ##Typo in all the filenames!
mutate(ROIName = ToMROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
ToM.contrasts[Contrast]))) %>%
mutate(Group = 'ToM') %>%
ungroup()
#And stick it all back together!!
allSigChange = rbind(RHLang_sigs, LHLang_sigs, MD_sigs, ToM_sigs)
##RIGHT HERE, read in Cloudy (PL2017 analyses) since they have a totally different file structure :/
#Pick allSigChange columns to match
allSigChange <- allSigChange %>%
dplyr::select(one_of(c('Group', 'fROIs', 'task', 'ROIName', 'SubjectNumber', 'contrastName','sigChange'))) %>%
transmutate(SubjectNumber = as.factor(SubjectNumber))
setwd(paste(meansig_outputs_folder, 'CloudyToMfROIS_resp_Jokes_20181101',sep="/"))
Cloudy_sigs  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=FALSE)
names(Cloudy_sigs) = c('ROIName','SubjectNumber','contrastName','nVoxels','SignalChange')
Cloudy_sigs <- Cloudy_sigs %>%
select(-nVoxels) %>%
mutate(Group = 'Cloudy', task = 'Cloudy', fROIs = 'ToMfROIs_by_Cloudy')
allSigChange <- bind_rows(allSigChange, Cloudy_sigs)
# Start here to reproduce the main (confirmatory) analyses for the Jokes paper
#This file reads in ALL the %-signal-change values, per-participant, per-parcel, per-contrast,
# Those %-signal-change calculations are produced by the awesome toolbox analyses, and represent a single overall calculation
#derived for the whole parcel region (not individual voxels, as mk sometimes forgets)
#Here we just print out the figs for regions responding to Jokes/Jokes custom, because that's the main result
#ALL packages necessary for the analysis pipeline should get loaded here
rm(list = ls())
library(bootstrap)
library(dplyr)
library(ggplot2)
library(lme4)
library(pwr)
library(stringr)
library(tidyr)
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
meansig_outputs_folder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/E2_meansignal_outputs/'
########
#READ IN DATA
########
#New method: Read in the raw data from all_meansignal, that's much easier! Then condition on the
#column labeled fROIs to assign names appropriately. NOTE that this now takes care of reading
#in the localizer-to-localizer ones too, to facilitate making the supplemental materials.
allSigChange = read.csv(paste(meansig_outputs_folder, 'all_mean_signal_outputs.csv', sep=''))
#FOR NOW: Make a choice whether to do all analyses with top 50 voxels or top 10% voxels
allSigChange = filter(allSigChange, ind_selection_method == 'Top10Percent')
#NEW: Also, screen out the split-half analyses, we'll treat those in their own file since exploratory
allSigChange = filter(allSigChange, !filename %in% c('SplitHalf_RHLfROIs_resp_Jokes_20170904',
'SplitHalf_LangfROIs_resp_Jokes_20170904',
'SplitHalf_MDfROIs_resp_Jokes_20170904',
'SplitHalf_ToMfROIs_resp_Jokes_20170904'))
#(This can be changed to 'Top50Voxels' to see all results with that fROI selection procedure
# List contrast and ROI names so it's not just numbers!!!!! (This ordering comes from the
# standard ordering produced by the 2nd level analyses; we'll arrange differently in the plots)
RHLangROI.Names = c('RPost Temp', 'RAnt Temp', 'RAngG', 'RIFG',      'RMFG',     'RIFG orb');
LangROI.Names = c('LPost Temp', 'LAnt Temp', 'LAngG', 'LIFG',      'LMFG',     'LIFG orb');
MDROI.Names = c('LIFG op',  'RIFG op', 'LMFG',    'RMFG',    'LMFG orb',
'RMFG orb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LPar Inf', 'RPar Inf', 'LPar Sup',
'RPar Sup', 'LACC',   'RACC');
ToMROI.Names = c('DM PFC', 'LTPJ',  'MM PFC', 'PC',
'RTPJ',  'VM PFC', 'RSTS');
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high', 'linear') #Bug solved! I didn't record 'other' (no response) in the toolbox output this time. NBD.
lang.contrasts = c('S','N','S-N')
MD.contrasts = c('H','E','H-E')
ToM.contrasts = c('bel','pho','bel-pho')
#Split the data into groups by fROIs, and rename them as appropriate
RHLang_sigs = data.frame(NULL)
LHLang_sigs = data.frame(NULL)
MD_sigs = data.frame(NULL)
ToM_sigs = data.frame(NULL)
RHLang_sigs = allSigChange %>%
filter(fROIs == 'RHLfROIs')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'RHLang') %>%
ungroup()
LHLang_sigs = allSigChange %>%
filter(fROIs == 'LangfROIs')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'LHLang') %>%
ungroup()
MD_sigs = allSigChange %>%
filter(fROIs == 'MDfROIs')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
MD.contrasts[Contrast]))) %>%
mutate(Group = ifelse(ROI %%2 == 1, 'MDLeft','MDRight')) %>%
ungroup()
ToM_sigs = allSigChange %>%
filter(fROIs == 'ToMfROIS')%>% ##Typo in all the filenames!
mutate(ROIName = ToMROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
ToM.contrasts[Contrast]))) %>%
mutate(Group = 'ToM') %>%
ungroup()
#And stick it all back together!!
allSigChange = rbind(RHLang_sigs, LHLang_sigs, MD_sigs, ToM_sigs)
##RIGHT HERE, read in Cloudy (PL2017 analyses) since they have a totally different file structure :/
#Pick allSigChange columns to match
allSigChange <- allSigChange %>%
dplyr::select(one_of(c('Group', 'fROIs', 'task', 'ROIName', 'SubjectNumber', 'contrastName','sigChange'))) %>%
transmute(SubjectNumber = as.factor(SubjectNumber))
setwd(paste(meansig_outputs_folder, 'CloudyToMfROIS_resp_Jokes_20181101',sep="/"))
Cloudy_sigs  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=FALSE)
names(Cloudy_sigs) = c('ROIName','SubjectNumber','contrastName','nVoxels','SignalChange')
Cloudy_sigs <- Cloudy_sigs %>%
select(-nVoxels) %>%
mutate(Group = 'Cloudy', task = 'Cloudy', fROIs = 'ToMfROIs_by_Cloudy')
allSigChange <- bind_rows(allSigChange, Cloudy_sigs)
#In addition to the by-region signal changes, we are going to give each person an average signal change value for each localizer, each task
avgSigChange = aggregate(allSigChange$sigChange, by=list(allSigChange$Group,allSigChange$task, allSigChange$SubjectNumber,allSigChange$contrastName), mean)
names(avgSigChange) = c('Group', 'task', 'SubjectNumber', 'contrastName','sigChange')
avgSigChange$ROIName = 'LocalizerAverage'
avgSigChange$ROI = 0
allSigChange <- rbind(allSigChange, avgSigChange)
# Start here to reproduce the main (confirmatory) analyses for the Jokes paper
#This file reads in ALL the %-signal-change values, per-participant, per-parcel, per-contrast,
# Those %-signal-change calculations are produced by the awesome toolbox analyses, and represent a single overall calculation
#derived for the whole parcel region (not individual voxels, as mk sometimes forgets)
#Here we just print out the figs for regions responding to Jokes/Jokes custom, because that's the main result
#ALL packages necessary for the analysis pipeline should get loaded here
rm(list = ls())
library(bootstrap)
library(dplyr)
library(ggplot2)
library(lme4)
library(pwr)
library(stringr)
library(tidyr)
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
meansig_outputs_folder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/E2_meansignal_outputs/'
########
#READ IN DATA
########
#New method: Read in the raw data from all_meansignal, that's much easier! Then condition on the
#column labeled fROIs to assign names appropriately. NOTE that this now takes care of reading
#in the localizer-to-localizer ones too, to facilitate making the supplemental materials.
allSigChange = read.csv(paste(meansig_outputs_folder, 'all_mean_signal_outputs.csv', sep=''))
#FOR NOW: Make a choice whether to do all analyses with top 50 voxels or top 10% voxels
allSigChange = filter(allSigChange, ind_selection_method == 'Top10Percent')
#NEW: Also, screen out the split-half analyses, we'll treat those in their own file since exploratory
allSigChange = filter(allSigChange, !filename %in% c('SplitHalf_RHLfROIs_resp_Jokes_20170904',
'SplitHalf_LangfROIs_resp_Jokes_20170904',
'SplitHalf_MDfROIs_resp_Jokes_20170904',
'SplitHalf_ToMfROIs_resp_Jokes_20170904'))
#(This can be changed to 'Top50Voxels' to see all results with that fROI selection procedure
# List contrast and ROI names so it's not just numbers!!!!! (This ordering comes from the
# standard ordering produced by the 2nd level analyses; we'll arrange differently in the plots)
RHLangROI.Names = c('RPost Temp', 'RAnt Temp', 'RAngG', 'RIFG',      'RMFG',     'RIFG orb');
LangROI.Names = c('LPost Temp', 'LAnt Temp', 'LAngG', 'LIFG',      'LMFG',     'LIFG orb');
MDROI.Names = c('LIFG op',  'RIFG op', 'LMFG',    'RMFG',    'LMFG orb',
'RMFG orb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LPar Inf', 'RPar Inf', 'LPar Sup',
'RPar Sup', 'LACC',   'RACC');
ToMROI.Names = c('DM PFC', 'LTPJ',  'MM PFC', 'PC',
'RTPJ',  'VM PFC', 'RSTS');
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high', 'linear') #Bug solved! I didn't record 'other' (no response) in the toolbox output this time. NBD.
lang.contrasts = c('S','N','S-N')
MD.contrasts = c('H','E','H-E')
ToM.contrasts = c('bel','pho','bel-pho')
#Split the data into groups by fROIs, and rename them as appropriate
RHLang_sigs = data.frame(NULL)
LHLang_sigs = data.frame(NULL)
MD_sigs = data.frame(NULL)
ToM_sigs = data.frame(NULL)
RHLang_sigs = allSigChange %>%
filter(fROIs == 'RHLfROIs')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'RHLang') %>%
ungroup()
LHLang_sigs = allSigChange %>%
filter(fROIs == 'LangfROIs')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'LHLang') %>%
ungroup()
MD_sigs = allSigChange %>%
filter(fROIs == 'MDfROIs')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
MD.contrasts[Contrast]))) %>%
mutate(Group = ifelse(ROI %%2 == 1, 'MDLeft','MDRight')) %>%
ungroup()
ToM_sigs = allSigChange %>%
filter(fROIs == 'ToMfROIS')%>% ##Typo in all the filenames!
mutate(ROIName = ToMROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
ToM.contrasts[Contrast]))) %>%
mutate(Group = 'ToM') %>%
ungroup()
#And stick it all back together!!
allSigChange = rbind(RHLang_sigs, LHLang_sigs, MD_sigs, ToM_sigs)
##RIGHT HERE, read in Cloudy (PL2017 analyses) since they have a totally different file structure :/
#Pick allSigChange columns to match
allSigChange <- allSigChange %>%
dplyr::select(one_of(c('Group', 'fROIs', 'task', 'ROIName', 'SubjectNumber', 'contrastName','sigChange'))) %>%
transmute(SubjectNumber = as.factor(SubjectNumber))
setwd(paste(meansig_outputs_folder, 'CloudyToMfROIS_resp_Jokes_20181101',sep="/"))
Cloudy_sigs  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=FALSE)
names(Cloudy_sigs) = c('ROIName','SubjectNumber','contrastName','nVoxels','sigChange')
Cloudy_sigs <- Cloudy_sigs %>%
select(-nVoxels) %>%
mutate(Group = 'Cloudy', task = 'Cloudy', fROIs = 'ToMfROIs_by_Cloudy')
allSigChange <- bind_rows(allSigChange, Cloudy_sigs)
#In addition to the by-region signal changes, we are going to give each person an average signal change value for each localizer, each task
avgSigChange = aggregate(allSigChange$sigChange, by=list(allSigChange$Group,allSigChange$task, allSigChange$SubjectNumber,allSigChange$contrastName), mean)
names(avgSigChange) = c('Group', 'task', 'SubjectNumber', 'contrastName','sigChange')
avgSigChange$ROIName = 'LocalizerAverage'
avgSigChange$ROI = 0
allSigChange <- rbind(allSigChange, avgSigChange)
# Start here to reproduce the main (confirmatory) analyses for the Jokes paper
#This file reads in ALL the %-signal-change values, per-participant, per-parcel, per-contrast,
# Those %-signal-change calculations are produced by the awesome toolbox analyses, and represent a single overall calculation
#derived for the whole parcel region (not individual voxels, as mk sometimes forgets)
#Here we just print out the figs for regions responding to Jokes/Jokes custom, because that's the main result
#ALL packages necessary for the analysis pipeline should get loaded here
rm(list = ls())
library(bootstrap)
library(dplyr)
library(ggplot2)
library(lme4)
library(pwr)
library(stringr)
library(tidyr)
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
meansig_outputs_folder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/E2_meansignal_outputs/'
########
#READ IN DATA
########
#New method: Read in the raw data from all_meansignal, that's much easier! Then condition on the
#column labeled fROIs to assign names appropriately. NOTE that this now takes care of reading
#in the localizer-to-localizer ones too, to facilitate making the supplemental materials.
allSigChange = read.csv(paste(meansig_outputs_folder, 'all_mean_signal_outputs.csv', sep=''))
#FOR NOW: Make a choice whether to do all analyses with top 50 voxels or top 10% voxels
allSigChange = filter(allSigChange, ind_selection_method == 'Top10Percent')
#NEW: Also, screen out the split-half analyses, we'll treat those in their own file since exploratory
allSigChange = filter(allSigChange, !filename %in% c('SplitHalf_RHLfROIs_resp_Jokes_20170904',
'SplitHalf_LangfROIs_resp_Jokes_20170904',
'SplitHalf_MDfROIs_resp_Jokes_20170904',
'SplitHalf_ToMfROIs_resp_Jokes_20170904'))
#(This can be changed to 'Top50Voxels' to see all results with that fROI selection procedure
# List contrast and ROI names so it's not just numbers!!!!! (This ordering comes from the
# standard ordering produced by the 2nd level analyses; we'll arrange differently in the plots)
RHLangROI.Names = c('RPost Temp', 'RAnt Temp', 'RAngG', 'RIFG',      'RMFG',     'RIFG orb');
LangROI.Names = c('LPost Temp', 'LAnt Temp', 'LAngG', 'LIFG',      'LMFG',     'LIFG orb');
MDROI.Names = c('LIFG op',  'RIFG op', 'LMFG',    'RMFG',    'LMFG orb',
'RMFG orb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LPar Inf', 'RPar Inf', 'LPar Sup',
'RPar Sup', 'LACC',   'RACC');
ToMROI.Names = c('DM PFC', 'LTPJ',  'MM PFC', 'PC',
'RTPJ',  'VM PFC', 'RSTS');
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high', 'linear') #Bug solved! I didn't record 'other' (no response) in the toolbox output this time. NBD.
lang.contrasts = c('S','N','S-N')
MD.contrasts = c('H','E','H-E')
ToM.contrasts = c('bel','pho','bel-pho')
#Split the data into groups by fROIs, and rename them as appropriate
RHLang_sigs = data.frame(NULL)
LHLang_sigs = data.frame(NULL)
MD_sigs = data.frame(NULL)
ToM_sigs = data.frame(NULL)
RHLang_sigs = allSigChange %>%
filter(fROIs == 'RHLfROIs')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'RHLang') %>%
ungroup()
LHLang_sigs = allSigChange %>%
filter(fROIs == 'LangfROIs')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'LHLang') %>%
ungroup()
MD_sigs = allSigChange %>%
filter(fROIs == 'MDfROIs')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
MD.contrasts[Contrast]))) %>%
mutate(Group = ifelse(ROI %%2 == 1, 'MDLeft','MDRight')) %>%
ungroup()
ToM_sigs = allSigChange %>%
filter(fROIs == 'ToMfROIS')%>% ##Typo in all the filenames!
mutate(ROIName = ToMROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
ToM.contrasts[Contrast]))) %>%
mutate(Group = 'ToM') %>%
ungroup()
#And stick it all back together!!
allSigChange = rbind(RHLang_sigs, LHLang_sigs, MD_sigs, ToM_sigs)
##RIGHT HERE, read in Cloudy (PL2017 analyses) since they have a totally different file structure :/
#Pick allSigChange columns to match
allSigChange <- allSigChange %>%
dplyr::select(one_of(c('Group', 'task', 'ROIName', 'SubjectNumber', 'contrastName','sigChange'))) %>%
transmute(SubjectNumber = as.factor(SubjectNumber))
setwd(paste(meansig_outputs_folder, 'CloudyToMfROIS_resp_Jokes_20181101',sep="/"))
Cloudy_sigs  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=FALSE)
names(Cloudy_sigs) = c('ROIName','SubjectNumber','contrastName','nVoxels','sigChange')
Cloudy_sigs <- Cloudy_sigs %>%
select(-nVoxels) %>%
mutate(Group = 'ToM_by_Cloudy', task = 'Cloudy')
allSigChange <- bind_rows(allSigChange, Cloudy_sigs)
#In addition to the by-region signal changes, we are going to give each person an average signal change value for each localizer, each task
avgSigChange = aggregate(allSigChange$sigChange, by=list(allSigChange$Group,allSigChange$task, allSigChange$SubjectNumber,allSigChange$contrastName), mean)
names(avgSigChange) = c('Group', 'task', 'SubjectNumber', 'contrastName','sigChange')
avgSigChange$ROIName = 'LocalizerAverage'
allSigChange <- bind_rows(allSigChange, avgSigChange)
lapply(allSigChange, class)
allSigChange[c('Group', 'task', 'ROIName', 'SubjectNumber', 'contrastName'))] <- lapply(allSigChange[c('Group', 'task', 'ROIName', 'SubjectNumber', 'contrastName')], factor)#fixing factor assignment!
allSigChange[c('Group', 'task', 'ROIName', 'SubjectNumber', 'contrastName')] <- lapply(allSigChange[c('Group', 'task', 'ROIName', 'SubjectNumber', 'contrastName')], factor)#fixing factor assignment!
# Start here to reproduce the main (confirmatory) analyses for the Jokes paper
#This file reads in ALL the %-signal-change values, per-participant, per-parcel, per-contrast,
# Those %-signal-change calculations are produced by the awesome toolbox analyses, and represent a single overall calculation
#derived for the whole parcel region (not individual voxels, as mk sometimes forgets)
#Here we just print out the figs for regions responding to Jokes/Jokes custom, because that's the main result
#ALL packages necessary for the analysis pipeline should get loaded here
rm(list = ls())
library(bootstrap)
library(dplyr)
library(ggplot2)
library(lme4)
library(pwr)
library(stringr)
library(tidyr)
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
meansig_outputs_folder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/E2_meansignal_outputs/'
########
#READ IN DATA
########
#New method: Read in the raw data from all_meansignal, that's much easier! Then condition on the
#column labeled fROIs to assign names appropriately. NOTE that this now takes care of reading
#in the localizer-to-localizer ones too, to facilitate making the supplemental materials.
allSigChange = read.csv(paste(meansig_outputs_folder, 'all_mean_signal_outputs.csv', sep=''))
#FOR NOW: Make a choice whether to do all analyses with top 50 voxels or top 10% voxels
allSigChange = filter(allSigChange, ind_selection_method == 'Top10Percent')
#NEW: Also, screen out the split-half analyses, we'll treat those in their own file since exploratory
allSigChange = filter(allSigChange, !filename %in% c('SplitHalf_RHLfROIs_resp_Jokes_20170904',
'SplitHalf_LangfROIs_resp_Jokes_20170904',
'SplitHalf_MDfROIs_resp_Jokes_20170904',
'SplitHalf_ToMfROIs_resp_Jokes_20170904'))
#(This can be changed to 'Top50Voxels' to see all results with that fROI selection procedure
# List contrast and ROI names so it's not just numbers!!!!! (This ordering comes from the
# standard ordering produced by the 2nd level analyses; we'll arrange differently in the plots)
RHLangROI.Names = c('RPost Temp', 'RAnt Temp', 'RAngG', 'RIFG',      'RMFG',     'RIFG orb');
LangROI.Names = c('LPost Temp', 'LAnt Temp', 'LAngG', 'LIFG',      'LMFG',     'LIFG orb');
MDROI.Names = c('LIFG op',  'RIFG op', 'LMFG',    'RMFG',    'LMFG orb',
'RMFG orb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LPar Inf', 'RPar Inf', 'LPar Sup',
'RPar Sup', 'LACC',   'RACC');
ToMROI.Names = c('DM PFC', 'LTPJ',  'MM PFC', 'PC',
'RTPJ',  'VM PFC', 'RSTS');
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high', 'linear') #Bug solved! I didn't record 'other' (no response) in the toolbox output this time. NBD.
lang.contrasts = c('S','N','S-N')
MD.contrasts = c('H','E','H-E')
ToM.contrasts = c('bel','pho','bel-pho')
#Split the data into groups by fROIs, and rename them as appropriate
RHLang_sigs = data.frame(NULL)
LHLang_sigs = data.frame(NULL)
MD_sigs = data.frame(NULL)
ToM_sigs = data.frame(NULL)
RHLang_sigs = allSigChange %>%
filter(fROIs == 'RHLfROIs')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'RHLang') %>%
ungroup()
LHLang_sigs = allSigChange %>%
filter(fROIs == 'LangfROIs')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'LHLang') %>%
ungroup()
MD_sigs = allSigChange %>%
filter(fROIs == 'MDfROIs')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
MD.contrasts[Contrast]))) %>%
mutate(Group = ifelse(ROI %%2 == 1, 'MDLeft','MDRight')) %>%
ungroup()
ToM_sigs = allSigChange %>%
filter(fROIs == 'ToMfROIS')%>% ##Typo in all the filenames!
mutate(ROIName = ToMROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
ToM.contrasts[Contrast]))) %>%
mutate(Group = 'ToM') %>%
ungroup()
#And stick it all back together!!
allSigChange = rbind(RHLang_sigs, LHLang_sigs, MD_sigs, ToM_sigs)
##RIGHT HERE, read in Cloudy (PL2017 analyses) since they have a totally different file structure :/
#Pick allSigChange columns to match
allSigChange <- allSigChange %>%
dplyr::select(one_of(c('Group', 'task', 'ROIName', 'SubjectNumber', 'contrastName','sigChange'))) %>%
transmute(SubjectNumber = as.factor(SubjectNumber))
setwd(paste(meansig_outputs_folder, 'CloudyToMfROIS_resp_Jokes_20181101',sep="/"))
Cloudy_sigs  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=FALSE)
names(Cloudy_sigs) = c('ROIName','SubjectNumber','contrastName','nVoxels','sigChange')
Cloudy_sigs <- Cloudy_sigs %>%
select(-nVoxels) %>%
mutate(Group = 'ToM_by_Cloudy', task = 'Cloudy')
allSigChange <- bind_rows(allSigChange, Cloudy_sigs)
#In addition to the by-region signal changes, we are going to give each person an average signal change value for each localizer, each task
avgSigChange = aggregate(allSigChange$sigChange, by=list(allSigChange$Group,allSigChange$task, allSigChange$SubjectNumber,allSigChange$contrastName), mean)
names(avgSigChange) = c('Group', 'task', 'SubjectNumber', 'contrastName','sigChange')
avgSigChange$ROIName = 'LocalizerAverage'
allSigChange <- bind_rows(allSigChange, avgSigChange)
allSigChange[c('Group', 'task', 'ROIName', 'SubjectNumber', 'contrastName')] <- lapply(allSigChange[c('Group', 'task', 'ROIName', 'SubjectNumber', 'contrastName')], factor)#fixing factor assignment!
#NOTE: Later scripts require this allSigChange object to be loaded into memory, run this script to here if it's missing
