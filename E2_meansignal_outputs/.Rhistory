#Make sure those factors are ordered....
LHLCustom$contrastName <- as.factor(LHLCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLCustom)
anova(m1,m0)
MDRCustom <- filter(allSigChange, Group == "MDRight", task == 'JokesCustom', contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
MDRCustom$contrastName <- as.factor(MDRCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRCustom)
anova(m1,m0)
MDLCustom <- filter(allSigChange, Group == "MDLeft", task == 'JokesCustom', contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
MDLCustom$contrastName <- as.factor(MDLCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLCustom)
anova(m1,m0)
#load_spmss_results
#
#This file loads the output of one of the results.csv files produced by the (mean signal) toolbox scripts into R.
#If I knew more about the mat file produced you could probably get all of this stuff out of
#there too.  But anyway this gets the mROI_data.csv file, sorts out its structure
#and reorganizes the data into proper longform. Take your analysis from there or save the result in a csv.
#Here, the csvs get saved back to the mean_signal folder for tidyness
library(dplyr)
library(tidyr)
library(stringr)
requireNamespace(plyr)
####
#Stuff to change!
myResultsPath = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/meansignal_outputs/'
myOutputPath = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/meansignal_outputs/'
whichResults = c('LangfROIs_resp_JokesCustom_20170720',
'LangfROIs_resp_JokesCustom_Top50Voxels_20170720',
'LangfROIs_resp_Jokes_20170703',
'LangfROIs_resp_Jokes_Top50Voxels_20170703',
'LangfROIs_resp_Lang_20170703',
'MDfROIs_resp_JokesCustom_20170726',
'MDfROIs_resp_JokesCustom_Top50Voxels_20170720',
'MDfROIs_resp_Jokes_20170720',
'MDfROIs_resp_Jokes_Top50Voxels_20170720',
'MDfROIs_resp_MD_20170720',
'RHLfROIs_resp_JokesCustom_20170720',
'RHLfROIs_resp_JokesCustom_Top50Voxels_20170720',
'RHLfROIs_resp_Jokes_20170703',
'RHLfROIs_resp_Jokes_Top50Voxels_20170703',
'RHLfROIs_resp_Lang_20170703',
'ToMfROIS_resp_JokesCustom_20170720',
'ToMfROIS_resp_JokesCustom_Top50Voxels_20170720',
'ToMfROIS_resp_Jokes_20170720',
'ToMfROIS_resp_Jokes_Top50Voxels_20170720',
'ToMfROIS_resp_ToM_20170720',
'SplitHalf_RHLfROIs_resp_Jokes_20170904',
'SplitHalf_LangfROIs_resp_Jokes_20170904',
'SplitHalf_MDfROIs_resp_Jokes_20170904',
'SplitHalf_ToMfROIs_resp_Jokes_20170904');
toSave = 1
####
#Leave the rest alone unless you're feeling fancy
all_mean_signal = data.frame(NULL)
for (result in whichResults){
setwd(paste(myResultsPath,result, sep=""))
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1)
lastsub = ncol(myfile)
myfile= myfile[complete.cases(myfile[,lastsub]),]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
#(this happens in 2_figs etc. now, but we do read the filenames to make that easier...)
#Add details about what this analysis is by splitting up the filename (requires regular filenames!)
rundetails = str_split_fixed(result, '_', 4)
myfROIs = rundetails[[1]]
myTask = rundetails[[3]]
myMethod = 'Top10Percent'
if(str_detect(rundetails[[4]], 'Top50')){myMethod = 'Top50Voxels'}
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.) %>%
mutate(filename = result)%>%
mutate(fROIs = myfROIs)%>%
mutate(task = myTask)%>%
mutate(ind_selection_method = myMethod)%>%
plyr::rename(replace = c(average.ROI.size="ROI.size"), warn_missing = FALSE)
#if string contains 'Top50'
#'LangFrois' etc.
#(rename critical)
#'Jokes'
#'JokesCustom'
#Optional: print back out a nice file with a more informative name.
if(toSave){
setwd(myOutputPath)
myFileName = paste(result,'.csv', sep="")
zz <- file(myFileName, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
#And add it to the giant dataframe
if (nrow(all_mean_signal) == 0){
all_mean_signal = myfile
}else{
all_mean_signal = rbind(all_mean_signal, myfile)
}
}
write.csv(all_mean_signal, 'all_mean_signal_outputs.csv', row.names = FALSE)
#Run this file to convert our toolbox outputs to tidy csv.  It's way easier on
#data from the PL2017 pipeline, but make sure you do the right one.
####
#Stuff to change!
myResultsFolder = paste(getwd(),'/ToMfROIs_resp_Cloudy_PL2017_20180312',sep='')
myOutputFolder = getwd()
myFilename = 'ToMfROIs_resp_Cloudy_PL2017_20180312.csv'
toSave = 1
#(Resulting data struct stored in variable myfile, to use directory)
####
# Leave alone unless feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(myResultsFolder)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=FALSE)
names(myfile) = c('ROIName','Subject','Contrast','nVoxels','SignalChange')
if(toSave){
setwd(myOutputFolder)
zz <- file(myFilename, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
# #### Old version, pre PL2017
# #Leave the rest alone unless you're feeling fancy
#
# library(dplyr)
# library(tidyr)
# library(stringr)
#
# setwd(myResultsFolder)
#
# #Open the weirdly formatted files and get just the table we want.
# myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=FALSE)
# lastsub = ncol(myfile)
# myfile= myfile[complete.cases(myfile[,lastsub]),]#drop things past the individual % changes....
#
# #To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
# #localizer, provide names for parcels. Also could add all that as an optional function arg.
#
# extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
#   foo = str_split(mystring, "\\.")
#   myval = unlist(foo[[1]][mynum])
#   return(myval)
#
# }
#
# #Make the data beautiful and longform.
# myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
# myfile <- myfile %>%
#   gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
#   rowwise() %>%
#   mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
#   mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
#   select(-Subject_and_Cont) %>%
#   rename(ROI = ROI.)
#
#
# #Optional: print back out a nice file with a more informative name.
# if(toSave){
#   setwd(myOutputFolder)
#   zz <- file(myFilename, "w")
#   write.csv(myfile, zz, row.names=FALSE)
#   close(zz)
# }
#Run this file to convert our toolbox outputs to tidy csv.  It's way easier on
#data from the PL2017 pipeline, but make sure you do the right one.
####
#Stuff to change!
myResultsFolder = paste(getwd(),'/ToMfROIs_resp_Cloudy_PL2017_20180312',sep='')
myOutputFolder = getwd()
myFilename = 'ToMfROIs_resp_Cloudy_PL2017_20180312.csv'
toSave = 1
#(Resulting data struct stored in variable myfile, to use directory)
# #### Purportedly for PL2017; note that analyses 3/12-3/14 did NOT produce this new kind of output
# # Leave alone unless feeling fancy
#
#
# library(dplyr)
# library(tidyr)
# library(stringr)
#
# setwd(myResultsFolder)
#
# #Open the weirdly formatted files and get just the table we want.
# myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=FALSE)
# names(myfile) = c('ROIName','Subject','Contrast','nVoxels','SignalChange')
#
# if(toSave){
#   setwd(myOutputFolder)
#   zz <- file(myFilename, "w")
#   write.csv(myfile, zz, row.names=FALSE)
#   close(zz)
# }
#### Old version, pre PL2017
#Leave the rest alone unless you're feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(myResultsFolder)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=FALSE)
lastsub = ncol(myfile)
myfile= myfile[complete.cases(myfile[,lastsub]),]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
#Optional: print back out a nice file with a more informative name.
if(toSave){
setwd(myOutputFolder)
zz <- file(myFilename, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
library(dplyr)
library(tidyr)
library(stringr)
setwd(myResultsFolder)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=FALSE)
lastsub = ncol(myfile)
View(myfile)
myfile= myfile[complete.cases(myfile[,lastsub]),]#drop things past the individual % changes....
View(myfile)
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=FALSE)
lastsub = ncol(myfile)
myfile= myfile[,1:nRowsToKeep]#drop things past the individual % changes....
nRowsToKeep = 8 #Needed for the newest version
myfile= myfile[,1:nRowsToKeep]#drop things past the individual % changes....
View(myfile)
#Run this file to convert our toolbox outputs to tidy csv.  It's way easier on
#data from the PL2017 pipeline, but make sure you do the right one.
#(Resulting data struct stored in variable myfile in case you want to access directly)
####
#Stuff to change!
myResultsFolder = paste(getwd(),'/ToMfROIs_resp_Cloudy_PL2017_20180312',sep='')
myOutputFolder = getwd()
myFilename = 'ToMfROIs_resp_Cloudy_PL2017_20180312.csv'
toSave = 1
nRowsToKeep = 8 #Needed for the newest version
#### VERSION FOR PL2017 DATA AS FORMATTED 3/12-3/14
#Leave the rest alone unless you're feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(myResultsFolder)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=FALSE)
lastsub = ncol(myfile)
myfile= myfile[1:nRowsToKeep,]#drop things past the individual % changes....
View(myfile)
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
names(myfile)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=TRUE)
lastsub = ncol(myfile)
myfile= myfile[1:nRowsToKeep,]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
View(myfile)
names(myfile)
nRowsToKeep = 7 #Needed for the newest version, corresponds to the number of regions/fROIs in your mask
#### VERSION FOR PL2017 DATA AS FORMATTED 3/12-3/14
#Leave the rest alone unless you're feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(myResultsFolder)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=TRUE)
lastsub = ncol(myfile)
myfile= myfile[1:nRowsToKeep,]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
View(myfile)
#Optional: print back out a nice file with a more informative name.
if(toSave){
setwd(myOutputFolder)
zz <- file(myFilename, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
cd ..
pwd(..)
setwd(..)
setwd('..')
pwd
pwd()
getwd()
#Stuff to change!
myResultsFolder = paste(getwd(),'/CloudyToMfROIS_mentpain_resp_Jokes_PL2017_20180314',sep='')
myOutputFolder = getwd()
myFilename = 'CloudyToMfROIS_mentpain_resp_Jokes_PL2017_20180314.csv'
toSave = 1
nRowsToKeep = 7 #Needed for the newest version, corresponds to the number of regions/fROIs in your mask
#### VERSION FOR PL2017 DATA AS FORMATTED 3/12-3/14
#Leave the rest alone unless you're feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(myResultsFolder)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=TRUE)
lastsub = ncol(myfile)
myfile= myfile[1:nRowsToKeep,]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
#Optional: print back out a nice file with a more informative name.
if(toSave){
setwd(myOutputFolder)
zz <- file(myFilename, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
setwd('..')
#Stuff to change!
myResultsFolder = paste(getwd(),'/CloudyToMfROIS_mentpain_resp_JokesCustom_PL2017_20180314',sep='')
myOutputFolder = getwd()
myFilename = 'CloudyToMfROIS_mentpain_resp_JokesCustom_PL2017_20180314.csv'
toSave = 1
nRowsToKeep = 7 #Needed for the newest version, corresponds to the number of regions/fROIs in your mask
#### VERSION FOR PL2017 DATA AS FORMATTED 3/12-3/14
#Leave the rest alone unless you're feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(myResultsFolder)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=TRUE)
lastsub = ncol(myfile)
myfile= myfile[1:nRowsToKeep,]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
#Optional: print back out a nice file with a more informative name.
if(toSave){
setwd(myOutputFolder)
zz <- file(myFilename, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
getwd()
setwd()
setwd('./E2_meansignal_outputs/
')
setwd('./E2_meansignal_outputs/')
#Run this file to convert our toolbox outputs to tidy csv.  It's way easier on
#data from the PL2017 pipeline, but make sure you do the right one.
#(Resulting data struct stored in variable myfile in case you want to access directly)
####
#Stuff to change!
myResultsFolder = paste(getwd(),'/CloudyToMfROIS_mentpain_resp_JokesCustom_PL2017_20180314',sep='')
myOutputFolder = getwd()
myFilename = 'CloudyToMfROIS_mentpain_resp_JokesCustom_PL2017_20180314.csv'
toSave = 1
nRowsToKeep = 7 #Needed for the newest version, corresponds to the number of regions/fROIs in your mask
#### VERSION FOR PL2017 DATA AS FORMATTED 3/12-3/14
#Leave the rest alone unless you're feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(myResultsFolder)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=TRUE)
lastsub = ncol(myfile)
myfile= myfile[1:nRowsToKeep,]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
#Optional: print back out a nice file with a more informative name.
if(toSave){
setwd(myOutputFolder)
zz <- file(myFilename, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
getwd()
####
#Stuff to change!
myResultsFolder = paste(getwd(),'/CloudyToMfROIS_mentpain_resp_JokesCustom_PL2017_20180314',sep='')
myOutputFolder = getwd()
myFilename = 'CloudyToMfROIS_mentpain_resp_JokesCustom_PL2017_20180314.csv'
toSave = 1
nRowsToKeep = 7 #Needed for the newest version, corresponds to the number of regions/fROIs in your mask
#### VERSION FOR PL2017 DATA AS FORMATTED 3/12-3/14
#Leave the rest alone unless you're feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(myResultsFolder)
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1, header=TRUE)
lastsub = ncol(myfile)
myfile= myfile[1:nRowsToKeep,]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
#Optional: print back out a nice file with a more informative name.
if(toSave){
setwd(myOutputFolder)
zz <- file(myFilename, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
