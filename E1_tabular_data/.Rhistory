'288_FED_20170412b_3T2',
'334_FED_20161221a_3T2',
'343_FED_20161208a_3T2',
'521_FED_20161228a_3T2',
'551_FED_20170412a_3T2',
'571_FED_20170412c_3T2',
'473_FED_20170210b_3T2',
'520_FED_20161227a_3T2',
'596_FED_20170426b_3T2')
participants = as.data.frame(participants)
participants$SubjectNumber = 1:nrow(participants)
participants$ID = participants$participant
allSigChange <- merge(allSigChange, participants, by=c('SubjectNumber'), all_x=TRUE, all_y=TRUE)
#(This drops any subjects who didn't get included for the Jokes analyses!)
####
# Ratings
####
#Get average ratings per category per participant
behavdata$response <- as.numeric(as.character(behavdata$response))
jokeResponseChange <- behavdata %>%
filter(!is.na(response)) %>%
group_by(ID, category) %>%
summarise(meanResponse = mean(response)) %>%
spread(category, meanResponse) %>%
mutate(meanResponseChange = joke-nonjoke)
####
# Signal change
####
jokeSigChange <- allSigChange %>%
filter(contrastName == 'joke-lit', Group == 'ToM', task == 'Jokes', ROIName == 'LocalizerAverage')
#Merge the datasets!
bb <- merge(jokeResponseChange, jokeSigChange, by=c('ID'))
View(avgRT)
## REPORT STATS
#E2 result - these are not highly correlated.
cor(bb$meanResponseChange, bb$sigChange)
## Added an LM (no random slopes/intercepts! just 1 value/person)
m1 <- lm(sigChange ~ meanResponseChange, data = bb)
m0 <- lm(sigChange ~ 1, data = bb)
anova(m1,m0)
## MAKE PRETTY GRAPH
setwd("./figs")
coef(lm(meanResponseChange ~ sigChange, data = bb))
behavdata <- filter(behavdata, !is.na(RT)) %>%
filter(!is.na(response))
####
# RT
####
#Get average RTs per category per participant
avgRT <- behavdata %>%
group_by(ID, category) %>%
summarise(meanRT = mean(RT))
#T test
t.test(meanRT ~ category, data=avgRT)
#Response times are not different by condition
####
# Ratings
####
#Get average ratings per category per participant
behavdata$response <- as.numeric(as.character(behavdata$response))
avgResponse <- behavdata %>%
group_by(ID, category) %>%
summarise(meanResponse = mean(response))
t.test(meanResponse ~ category, data=avgResponse)
#Responses are different by condition! The jokes are funny!
####
# Graphs!
####
#STOP HERE and look if avgRT for this data (Exp 2) is already in milliseconds. If not, make it so!
avgRT$meanRT
avgRT$meanRT <- avgRT$meanRT * 1000
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/E1_tabular_data")
avgRT_E1 = read.csv('avgRT_Behavioral_Exp1.csv')
avgResponse_E1 = read.csv('avgResponse_Behavioral_Exp1.csv')
allSigChange_E1 = read.csv('allSigChange_Exp1.csv')
allSigChange_E1 = allSigChange_E1 %>%
mutate(task = ifelse((contrastName == 'joke') | (contrastName == 'lit')| (contrastName == 'joke-lit'),
'Jokes', 'JokesCustom')) %>%
mutate(Experiment = 'Experiment 1')
allSigChange = allSigChange %>%
select(-one_of(c('participants','ID'))) %>%
mutate(Experiment = 'Experiment 2')
avgRT_E1 = avgRT_E1 %>%
mutate(ID = newSubjectName) %>%
mutate(Experiment = 'Experiment 1') %>%
select(-newSubjectName)
avgResponse_E1 = avgResponse_E1 %>%
mutate(ID = newSubjectName) %>%
mutate(Experiment = 'Experiment 1') %>%
select(-newSubjectName)
avgRT = mutate(avgRT, Experiment = 'Experiment 2')
avgResponse <- mutate(avgResponse, Experiment = 'Experiment 2')
#And merge the datasets
avgRT_E1$category <- as.factor(avgRT_E1$category)
avgResponse_E1$category <- as.factor(avgResponse_E1$category)
avgRT_E1$ID <- as.factor(avgRT_E1$ID)
avgResponse_E1$ID <- as.factor(avgResponse_E1$ID)
avgRT_E1$Experiment <- as.factor(avgRT_E1$Experiment)
avgResponse_E1$Experiment <- as.factor(avgResponse_E1$Experiment)
avgRT_E1$meanRT <- as.numeric(as.character(avgRT_E1$meanRT))
avgResponse_E1$meanResponse <- as.numeric(as.character(avgResponse_E1$meanResponse))
#And merge at last!
all_allSignalChange = merge(allSigChange, allSigChange_E1, all.x = TRUE, all.y = TRUE)
all_avgRT = merge(avgRT, avgRT_E1, all.x = TRUE, all.y = TRUE)
all_avgResponse = merge(avgResponse, avgResponse_E1, all.x = TRUE, all.y = TRUE)
all_avgRT$meanRT
all_avgRT[all_avgRT$Experiment == 'Experiment 1',]$meanRT <- all_avgRT[all_avgRT$Experiment == 'Experiment 1',]$meanRT * 1000
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
#Make the organized data for ggplot
all_avgRT <- ungroup(all_avgRT)
all_avgResponse <- ungroup(all_avgResponse)
#Load libraries
rm(list = ls())
library(bootstrap)
library(dplyr)
library(lme4)
library(tidyr)
library(ggplot2)
library(stringr)
library(reshape2)
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
meansig_outputs_folder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/E2_meansignal_outputs/'
###########
#(((EXPLORATORY A - Extend the high-med-low individual joke rating tests to the other systems. Appears in Supplemental E2)))
##########
#after powering the study up for the replication, we now detect (probably smaller) significant effects
#in all systems for jokes > nonjokes. The ToM ones are > RHLang and RMD (good!) but not significantly different in magnitude to
#Lang or MDL.  One way to show that those MD and RHL activations are tapping something other than humor in the task would be if
#funniness ratings didn't correlate with activation strength.  Let's see! (Oh wait, pause, this requires running more first level
#analyses to get those contrasts.  Check with Ev first. )
#(In fact, funniness ratings do correlate with activations in these regions as well)
#Load all the t tests (from E2)
allTests <- read.csv('localizer_t_tests_all.csv')
allTests <- allTests %>%
mutate(sig = p < 0.05) %>%
mutate(sigCor = p.adj < 0.05) %>%
mutate(mismatch = sig != sigCor)
#STOP HAMMER TIME Load the full result set for all signal changes (by running file 2 thru 121)
library(bootstrap)
library(dplyr)
library(ggplot2)
library(lme4)
library(pwr)
library(stringr)
library(tidyr)
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
meansig_outputs_folder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/E2_meansignal_outputs/'
########
#READ IN DATA
########
#New method: Read in the raw data from all_meansignal, that's much easier! Then condition on the
#column labeled fROIs to assign names appropriately. NOTE that this now takes care of reading
#in the localizer-to-localizer ones too, to facilitate making the supplemental materials.
allSigChange = read.csv(paste(meansig_outputs_folder, 'all_mean_signal_outputs.csv', sep=''))
#FOR NOW: Make a choice whether to do all analyses with top 50 voxels or top 10% voxels
allSigChange = filter(allSigChange, ind_selection_method == 'Top10Percent')
#NEW: Also, screen out the split-half analyses, we'll treat those in their own file since exploratory
allSigChange = filter(allSigChange, !filename %in% c('SplitHalf_RHLfROIs_resp_Jokes_20170904',
'SplitHalf_LangfROIs_resp_Jokes_20170904',
'SplitHalf_MDfROIs_resp_Jokes_20170904',
'SplitHalf_ToMfROIs_resp_Jokes_20170904'))
#(This can be changed to 'Top50Voxels' to see results with that fROI selection procedure
# List contrast and ROI names so it's not just numbers!!!!! (This ordering comes from the
# standard ordering produced by the 2nd level analyses; we'll arrange differently in the plots)
RHLangROI.Names = c('RPost Temp', 'RAnt Temp', 'RAngG', 'RIFG',      'RMFG',     'RIFG orb');
LangROI.Names = c('LPost Temp', 'LAnt Temp', 'LAngG', 'LIFG',      'LMFG',     'LIFG orb');
MDROI.Names = c('LIFG op',  'RIFG op', 'LMFG',    'RMFG',    'LMFG orb',
'RMFG orb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LPar Inf', 'RPar Inf', 'LPar Sup',
'RPar Sup', 'LACC',   'RACC');
ToMROI.Names = c('DM PFC', 'LTPJ',  'MM PFC', 'PC',
'RTPJ',  'VM PFC', 'RSTS');
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high', 'linear') #Bug solved! I didn't record 'other' (no response) in the toolbox output this time. NBD.
lang.contrasts = c('S','N','S-N')
MD.contrasts = c('H','E','H-E')
ToM.contrasts = c('bel','pho','bel-pho')
#Split the data into groups by fROIs, and rename them as appropriate
RHLang_sigs = data.frame(NULL)
LHLang_sigs = data.frame(NULL)
MD_sigs = data.frame(NULL)
ToM_sigs = data.frame(NULL)
RHLang_sigs = allSigChange %>%
filter(fROIs == 'RHLfROIs')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'RHLang') %>%
ungroup()
LHLang_sigs = allSigChange %>%
filter(fROIs == 'LangfROIs')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'LHLang') %>%
ungroup()
MD_sigs = allSigChange %>%
filter(fROIs == 'MDfROIs')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
MD.contrasts[Contrast]))) %>%
mutate(Group = ifelse(ROI %%2 == 1, 'MDLeft','MDRight')) %>%
ungroup()
ToM_sigs = allSigChange %>%
filter(fROIs == 'ToMfROIS')%>% ##Typo in all the filenames!
mutate(ROIName = ToMROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
ToM.contrasts[Contrast]))) %>%
mutate(Group = 'ToM') %>%
ungroup()
#And stick it all back together!!
allSigChange = rbind(RHLang_sigs, LHLang_sigs, MD_sigs, ToM_sigs)
#In addition to the by-region signal changes, we are going to give each person an average signal change value for each localizer, each task
avgSigChange = aggregate(allSigChange$sigChange, by=list(allSigChange$Group,allSigChange$task, allSigChange$SubjectNumber,allSigChange$contrastName), mean)
names(avgSigChange) = c('Group', 'task', 'SubjectNumber', 'contrastName','sigChange')
avgSigChange$ROIName = 'LocalizerAverage'
avgSigChange$ROI = 0
allSigChange <- allSigChange %>%
dplyr::select(one_of(c('Group', 'task', 'ROIName', 'ROI','SubjectNumber', 'contrastName','sigChange')))
allSigChange <- rbind(allSigChange, avgSigChange)
#NOTE: Later scripts require this allSigChange object to be loaded into memory, run this script to here if it's missing
#Convention: when all tests go one way, report them together as follows:
reportTests <- function(ts, ps){
if (all(ps > 0.05)){
paste('all insig, ts <', max(ts), 'ps>', min(ps))
} else if (all(ps < 0.05)){
paste('all sig, ts >', min(ts), 'ps<', max(ps))
} else {
'explore...'
}
}
#Extend the paramfun contrasts of the critical task to measure them in lang and in MD!
allTests %>%
filter(Group == 'RHLang', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
systemAvgs <- allSigChange %>%
filter(contrastName %in% c('joke-lit','H-E','S-N','bel-pho')) %>%
filter(task == 'Jokes') %>%
filter(ROI ==0) %>%
filter(Group %in% c("ToM", "MDRight","RHLang")) %>%
spread(Group, sigChange) %>%
gather("OtherSystem", "OthersigChange", c("MDRight", "RHLang")) %>%
mutate("ROILabel" = ifelse(OtherSystem=="MDRight", "RH Multiple Demand fROIs", "RH Language fROIs"))
ggplot(data=systemAvgs, aes(x=OthersigChange, y=ToM, color=ROILabel)) +
geom_smooth(method="lm", fill=NA, size = 0.3) +
geom_point() +
coord_fixed() +
geom_smooth(data = systemAvgs_noout, method="lm", fill=NA) +
scale_x_continuous(breaks=seq(-.1, 2, .1)) +
scale_y_continuous(breaks=seq(-.1, 2, .1)) +
scale_color_manual(values=c("red","blue")) +
theme_bw() +
theme(legend.title = element_blank()) +
theme(legend.position = 'bottom') +
xlab("% signal change on Jokes task in subject-specific fROIs") +
ylab ("% signal change on Jokes task (Theory of Mind fROIs)") +
facet_grid(~ROILabel)
#Remove an oddball subject for stats only!
systemAvgs_noout <- systemAvgs%>%
filter(SubjectNumber != 3)
#Let's graph, I'm confused how to compare these.
ggplot(data=systemAvgs, aes(x=OthersigChange, y=ToM, color=ROILabel)) +
geom_smooth(method="lm", fill=NA, size = 0.3) +
geom_point() +
coord_fixed() +
geom_smooth(data = systemAvgs_noout, method="lm", fill=NA) +
scale_x_continuous(breaks=seq(-.1, 2, .1)) +
scale_y_continuous(breaks=seq(-.1, 2, .1)) +
scale_color_manual(values=c("red","blue")) +
theme_bw() +
theme(legend.title = element_blank()) +
theme(legend.position = 'bottom') +
xlab("% signal change on Jokes task in subject-specific fROIs") +
ylab ("% signal change on Jokes task (Theory of Mind fROIs)") +
facet_grid(~ROILabel)
ggplot(data=systemAvgs, aes(x=OthersigChange, y=ToM, color=ROILabel)) +
geom_smooth(method="lm", fill=NA, size = 0.3) +
geom_point() +
coord_fixed() +
geom_smooth(data = systemAvgs_noout, method="lm", fill=NA) +
scale_x_continuous(breaks=seq(-.1, 2, .1)) +
scale_y_continuous(breaks=seq(-.1, 2, .1)) +
scale_color_manual(values=c("red","blue")) +
theme_bw() +
theme(legend.title = element_blank()) +
theme(legend.position = 'none') +
xlab("% signal change Joke>Non-Joke in the RH language and RH MD fROIs") +
ylab ("% signal change Joke>Non-Joke in the ToM fROIs") +
facet_grid(~ROILabel)
ggplot(data=systemAvgs, aes(x=OthersigChange, y=ToM, color=ROILabel)) +
geom_smooth(method="lm", fill=NA, size = 0.3) +
geom_point() +
coord_fixed() +
geom_smooth(data = systemAvgs_noout, method="lm", fill=NA) +
scale_x_continuous(breaks=seq(-.1, 2, .1)) +
scale_y_continuous(breaks=seq(-.1, 2, .1)) +
scale_color_manual(values=c("red","blue")) +
theme_bw() +
theme(legend.title = element_blank()) +
theme(legend.position = 'none') +
xlab("% signal change Joke>Non-Joke in the\nRH language and RH MD fROIs") +
ylab ("% signal change Joke>Non-Joke in the ToM fROIs") +
facet_grid(~ROILabel)
ggplot(data=systemAvgs, aes(x=OthersigChange, y=ToM, color=ROILabel)) +
geom_smooth(method="lm", fill=NA, size = 0.3) +
geom_point() +
coord_fixed() +
geom_smooth(data = systemAvgs_noout, method="lm", fill=NA) +
scale_x_continuous(breaks=seq(-.1, 2, .1)) +
scale_y_continuous(breaks=seq(-.1, 2, .1)) +
scale_color_manual(values=c("red","blue")) +
theme_bw() +
theme(legend.title = element_blank()) +
theme(legend.position = 'none') +
xlab("% signal change Joke>Non-Joke\nin the RH language and RH MD fROIs") +
ylab ("% signal change Joke>Non-Joke\nin the ToM fROIs") +
facet_grid(~ROILabel)
ggplot(data=systemAvgs, aes(x=OthersigChange, y=ToM, color=ROILabel)) +
geom_smooth(method="lm", fill=NA, size = 0.3) +
geom_point() +
coord_fixed() +
geom_smooth(data = systemAvgs_noout, method="lm", fill=NA) +
scale_x_continuous(breaks=seq(-.1, 2, .1)) +
scale_y_continuous(breaks=seq(-.1, 2, .1)) +
scale_color_manual(values=c("red","blue")) +
theme_bw() +
theme(legend.title = element_blank()) +
theme(legend.position = 'none') +
xlab("% signal change Joke>Non-Joke\nin the RH language and RH MD fROIs") +
ylab ("% signal change Joke>Non-Joke\nin the ToM fROIs") +
facet_grid(~ROILabel) +
ggsave('figs/exploratory_ToM_to_others_cor.jpg', height = 7, width = 8)
names(allSigChange)
levels(allSigChange$Group)
View(allSigChange)
View(avgRT)
#(set your own wd first)
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
behavdir = "/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/E2_behavioral_data/Jokes"
#New  - read in the nicely formatted behavioral data we made!
behavdata = read.csv(paste(behavdir, '/all_behavioral_output.csv', sep=''))
#Make sure you have AllSigChange!
View(allSigChange)
#We need to make sure to match up the right participants, so here we add the list order that participants
#were loaded into the ToM initial first-level analyses.
participants = c('168_FED_20161228b_3T2',
'290_FED_20170426a_3T2',
'301_FED_20161217b_3T2',
'366_FED_20161205a_3T2',
'426_FED_20161215c_3T2',
'430_FED_20170426d_3T2',
'498_FED_20170210c_3T2',
'555_FED_20170426c_3T2',
'576_FED_20170414b_3T2',
'577_FED_20170414c_3T2',
'578_FED_20170414d_3T2',
'288_FED_20170412b_3T2',
'334_FED_20161221a_3T2',
'343_FED_20161208a_3T2',
'521_FED_20161228a_3T2',
'551_FED_20170412a_3T2',
'571_FED_20170412c_3T2',
'473_FED_20170210b_3T2',
'520_FED_20161227a_3T2',
'596_FED_20170426b_3T2')
participants = as.data.frame(participants)
participants$SubjectNumber = 1:nrow(participants)
participants$ID = participants$participant
allSigChange <- merge(allSigChange, participants, by=c('SubjectNumber'), all_x=TRUE, all_y=TRUE)
#(This drops any subjects who didn't get included for the Jokes analyses!)
####
# Ratings
####
#Get average ratings per category per participant
behavdata$response <- as.numeric(as.character(behavdata$response))
jokeResponseChange <- behavdata %>%
filter(!is.na(response)) %>%
group_by(ID, category) %>%
summarise(meanResponse = mean(response)) %>%
spread(category, meanResponse) %>%
mutate(meanResponseChange = joke-nonjoke)
####
# Signal change
####
jokeSigChange <- allSigChange %>%
filter(contrastName == 'joke-lit', Group == 'ToM', task == 'Jokes', ROIName == 'LocalizerAverage')
#Merge the datasets!
bb <- merge(jokeResponseChange, jokeSigChange, by=c('ID'))
## REPORT STATS
#E2 result - these are not highly correlated.
cor(bb$meanResponseChange, bb$sigChange)
## Added an LM (no random slopes/intercepts! just 1 value/person)
m1 <- lm(sigChange ~ meanResponseChange, data = bb)
m0 <- lm(sigChange ~ 1, data = bb)
anova(m1,m0)
## MAKE PRETTY GRAPH
setwd("./figs")
coef(lm(meanResponseChange ~ sigChange, data = bb))
ggplot(data=bb, aes(y=sigChange, x=meanResponseChange)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
scale_y_continuous(limits = c(-0.25, 0.50), breaks = seq(-0.25, 0.50, 0.25)) +
scale_x_continuous(limits = c(0, 1.75), breaks = seq(0, 2, 0.5)) +
xlab('average rating response \n(Jokes - Non-jokes)') +
ylab('avg. % signal change \n(Jokes - Non-jokes)') +
theme_bw() +
ggsave(filename="behav_activation.jpg", width=3, height=3)
######################
#Make the behavioral graphs for basic response times and ratings (note, superseded by the composite version
#of this figure)
# Drop NA response
behavdata <- filter(behavdata, !is.na(RT)) %>%
filter(!is.na(response))
####
# RT
####
#Get average RTs per category per participant
avgRT <- behavdata %>%
group_by(ID, category) %>%
summarise(meanRT = mean(RT))
#T test
t.test(meanRT ~ category, data=avgRT)
#Response times are not different by condition
####
# Ratings
####
#Get average ratings per category per participant
behavdata$response <- as.numeric(as.character(behavdata$response))
avgResponse <- behavdata %>%
group_by(ID, category) %>%
summarise(meanResponse = mean(response))
t.test(meanResponse ~ category, data=avgResponse)
#Responses are different by condition! The jokes are funny!
####
# Graphs!
####
View(avgRT)
View(avgResponse)
View(allSigChange)
#STOP HERE and look if avgRT for this data (Exp 2) is already in milliseconds. If not, make it so!
avgRT$meanRT
avgRT$meanRT <- avgRT$meanRT * 1000
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/E1_tabular_data")
avgRT_E1 = read.csv('avgRT_Behavioral_Exp1.csv')
avgResponse_E1 = read.csv('avgResponse_Behavioral_Exp1.csv')
allSigChange_E1 = read.csv('allSigChange_Exp1.csv')
allSigChange_E1 = allSigChange_E1 %>%
mutate(task = ifelse((contrastName == 'joke') | (contrastName == 'lit')| (contrastName == 'joke-lit'),
'Jokes', 'JokesCustom')) %>%
mutate(Experiment = 'Experiment 1')
allSigChange = allSigChange %>%
select(-one_of(c('participants','ID'))) %>%
mutate(Experiment = 'Experiment 2')
avgRT_E1 = avgRT_E1 %>%
mutate(ID = newSubjectName) %>%
mutate(Experiment = 'Experiment 1') %>%
select(-newSubjectName)
avgResponse_E1 = avgResponse_E1 %>%
mutate(ID = newSubjectName) %>%
mutate(Experiment = 'Experiment 1') %>%
select(-newSubjectName)
avgRT = mutate(avgRT, Experiment = 'Experiment 2')
avgResponse <- mutate(avgResponse, Experiment = 'Experiment 2')
#And merge the datasets
avgRT_E1$category <- as.factor(avgRT_E1$category)
avgResponse_E1$category <- as.factor(avgResponse_E1$category)
avgRT_E1$ID <- as.factor(avgRT_E1$ID)
avgResponse_E1$ID <- as.factor(avgResponse_E1$ID)
avgRT_E1$Experiment <- as.factor(avgRT_E1$Experiment)
avgResponse_E1$Experiment <- as.factor(avgResponse_E1$Experiment)
avgRT_E1$meanRT <- as.numeric(as.character(avgRT_E1$meanRT))
avgResponse_E1$meanResponse <- as.numeric(as.character(avgResponse_E1$meanResponse))
#And merge at last!
all_allSignalChange = merge(allSigChange, allSigChange_E1, all.x = TRUE, all.y = TRUE)
all_avgRT = merge(avgRT, avgRT_E1, all.x = TRUE, all.y = TRUE)
all_avgResponse = merge(avgResponse, avgResponse_E1, all.x = TRUE, all.y = TRUE)
#Whoops! RTs should be in milliseconds. Experiment 1 probably isn't yet.
all_avgRT[all_avgRT$Experiment == 'Experiment 1',]$meanRT <- all_avgRT[all_avgRT$Experiment == 'Experiment 1',]$meanRT * 1000
##############
#Fig 2 - behavioral, RT and funny-ness ratings
#(Borrow code from th
names(all_allSignalChange)
all_allSignalChange %>%
group_by(Experiment) %>%
summarize(SubjectNumber, unique)
all_allSignalChange %>%
group_by(Experiment) %>%
summarize(numSubj = length(unique(SubjectNumber))
)
