'SplitHalf_MDfROIs_resp_Jokes_20170904',
'SplitHalf_ToMfROIs_resp_Jokes_20170904'))
#(This can be changed to 'Top50Voxels' to see results with that fROI selection procedure
# List contrast and ROI names so it's not just numbers!!!!! (This ordering comes from the
# standard ordering produced by the 2nd level analyses; we'll arrange differently in the plots)
RHLangROI.Names = c('RPost Temp', 'RAnt Temp', 'RAngG', 'RIFG',      'RMFG',     'RIFG orb');
LangROI.Names = c('LPost Temp', 'LAnt Temp', 'LAngG', 'LIFG',      'LMFG',     'LIFG orb');
MDROI.Names = c('LIFG op',  'RIFG op', 'LMFG',    'RMFG',    'LMFG orb',
'RMFG orb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LPar Inf', 'RPar Inf', 'LPar Sup',
'RPar Sup', 'LACC',   'RACC');
ToMROI.Names = c('DM PFC', 'LTPJ',  'MM PFC', 'PC',
'RTPJ',  'VM PFC', 'RSTS');
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high', 'linear') #Bug solved! I didn't record 'other' (no response) in the toolbox output this time. NBD.
lang.contrasts = c('S','N','S-N')
MD.contrasts = c('H','E','H-E')
ToM.contrasts = c('bel','pho','bel-pho')
#Split the data into groups by fROIs, and rename them as appropriate
RHLang_sigs = data.frame(NULL)
LHLang_sigs = data.frame(NULL)
MD_sigs = data.frame(NULL)
ToM_sigs = data.frame(NULL)
RHLang_sigs = allSigChange %>%
filter(fROIs == 'RHLfROIs')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'RHLang') %>%
ungroup()
LHLang_sigs = allSigChange %>%
filter(fROIs == 'LangfROIs')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'LHLang') %>%
ungroup()
MD_sigs = allSigChange %>%
filter(fROIs == 'MDfROIs')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
MD.contrasts[Contrast]))) %>%
mutate(Group = ifelse(ROI %%2 == 1, 'MDLeft','MDRight')) %>%
ungroup()
ToM_sigs = allSigChange %>%
filter(fROIs == 'ToMfROIS')%>% ##Typo in all the filenames!
mutate(ROIName = ToMROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
ToM.contrasts[Contrast]))) %>%
mutate(Group = 'ToM') %>%
ungroup()
#And stick it all back together!!
allSigChange = rbind(RHLang_sigs, LHLang_sigs, MD_sigs, ToM_sigs)
#In addition to the by-region signal changes, we are going to give each person an average signal change value for each localizer, each task
avgSigChange = aggregate(allSigChange$sigChange, by=list(allSigChange$Group,allSigChange$task, allSigChange$SubjectNumber,allSigChange$contrastName), mean)
names(avgSigChange) = c('Group', 'task', 'SubjectNumber', 'contrastName','sigChange')
avgSigChange$ROIName = 'LocalizerAverage'
avgSigChange$ROI = 0
allSigChange <- allSigChange %>%
dplyr::select(one_of(c('Group', 'task', 'ROIName', 'ROI','SubjectNumber', 'contrastName','sigChange')))
allSigChange <- rbind(allSigChange, avgSigChange)
#NOTE: Later scripts require this allSigChange object to be loaded into memory, run this script to here if it's missing
#(set your own wd first)
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
mywd = "/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline"
View(avgRT)
View(avgResponse)
View(allSigChange)
#STOP HAMMER TIME Load the full result set for all signal changes (by running file 2 thru 121)
View(allSigChange)
#Convention: when all tests go one way, report them together as follows:
reportTests <- function(ts, ps){
if (all(ps > 0.05)){
paste('all insig, ts <', max(ts), 'ps>', min(ps))
} else if (all(ps < 0.05)){
paste('all sig, ts >', min(ts), 'ps<', max(ps))
} else {
'explore...'
}
}
#Extend the paramfun contrasts of the critical task to measure them in lang and in MD!
allTests %>%
filter(Group == 'RHLang', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'LHLang', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'MDRight', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'MDLeft', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
#Now the same, with LME for all parcels in the localizers
RHLCustom <- filter(allSigChange, Group == "RHLang", task == 'JokesCustom', contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
RHLCustom$contrastName <- as.factor(RHLCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLCustom)
anova(m1,m0)
LHLCustom <- filter(allSigChange, Group == "LHLang", task == 'JokesCustom', contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
LHLCustom$contrastName <- as.factor(LHLCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLCustom)
anova(m1,m0)
MDRCustom <- filter(allSigChange, Group == "MDRight", task == 'JokesCustom', contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
MDRCustom$contrastName <- as.factor(MDRCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRCustom)
anova(m1,m0)
MDLCustom <- filter(allSigChange, Group == "MDLeft", task == 'JokesCustom', contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
MDLCustom$contrastName <- as.factor(MDLCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLCustom)
anova(m1,m0)
###########
#(((EXPLORATORY B - Checking for behaviorally 'oddball' subjects. Supplemental E1)))
##########
# There are some differences between studies 1 and 2! In particular, we see overall
# bumps in activation (J > NJ) for the other 2 systems, Lang and MD.
# One thing Ev wondered was whether there were any 'oddball' responders in our
# task who were evaluating the jokes very differently.  To determine this, we're going
# to try and calculate a value for each person, which is: "how far away from the mean
# response is this person's average answer"
#Prereq: run script 5behavioral to reload behavioral data and 2figs to load the signal-change data!
View(behavdata)
View(allSigChange)
#(((EXPLORATORY D, C is below now)))
# Make a table that aggregates responses by *item* (not person)
avgItemResponse <- behavdata %>%
group_by(item, category) %>%
summarise(meanResponse = mean(response, na.rm=TRUE))
#Merge it back to the main table
behavdata <- merge(behavdata, avgItemResponse, by=c("item","category"))
#Add distance-from-mean, and do a summary table!
oddballSubj <- behavdata %>%
mutate(distanceFromMean = response - meanResponse) %>%
group_by(ID, category) %>%
summarize(myMeanDistance = mean(distanceFromMean, na.rm=TRUE))
#Visualize that....
ggplot(data=oddballSubj, aes(y=myMeanDistance, x=category)) +
geom_point(stat = "identity")
#Is there anyone who is an outlier? Do a boxplot to see
# (Details: ) The upper whisker extends from the hinge to the largest value no further than 1.5 * IQR from the hinge (where IQR is the inter-quartile range, or distance between the first and third quartiles). The lower whisker extends from the hinge to the smallest value at most 1.5 * IQR of the hinge. Data beyond the end of the whiskers are called "outlying" points and are plotted individually.
ggplot(data=oddballSubj, aes(y=myMeanDistance, x=category)) +
geom_boxplot(stat = "boxplot") +
xlab('') +
ylab('Average distance from other subjects\' ratings')
#Interpretation: there are two people who found the NONjokes a bit funnier than we might expect, e.g. ~0.5 points funnier than the average person, that's it.
#(This is about half the observed effect size, jokes are about 1 point funnier than nonjokes over the whole dataset)
#########
View(avgRT)
View(avgResponse)
View(allSigChange)
#STOP HERE and look if avgRT for this
#(set your own wd first)
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
behavdir = "/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/E2_behavioral_data/Jokes"
#New  - read in the nicely formatted behavioral data we made!
behavdata = read.csv(paste(behavdir, '/all_behavioral_output.csv', sep=''))
#Make sure you have AllSigChange!
View(allSigChange)
#We need to make sure to match up the right participants, so here we add the list order that participants
#were loaded into the ToM initial first-level analyses.
participants = c('168_FED_20161228b_3T2',
'290_FED_20170426a_3T2',
'301_FED_20161217b_3T2',
'366_FED_20161205a_3T2',
'426_FED_20161215c_3T2',
'430_FED_20170426d_3T2',
'498_FED_20170210c_3T2',
'555_FED_20170426c_3T2',
'576_FED_20170414b_3T2',
'577_FED_20170414c_3T2',
'578_FED_20170414d_3T2',
'288_FED_20170412b_3T2',
'334_FED_20161221a_3T2',
'343_FED_20161208a_3T2',
'521_FED_20161228a_3T2',
'551_FED_20170412a_3T2',
'571_FED_20170412c_3T2',
'473_FED_20170210b_3T2',
'520_FED_20161227a_3T2',
'596_FED_20170426b_3T2')
participants = as.data.frame(participants)
participants$SubjectNumber = 1:nrow(participants)
participants$ID = participants$participant
allSigChange <- merge(allSigChange, participants, by=c('SubjectNumber'), all_x=TRUE, all_y=TRUE)
#(This drops any subjects who didn't get included for the Jokes analyses!)
####
# Ratings
####
#Get average ratings per category per participant
behavdata$response <- as.numeric(as.character(behavdata$response))
jokeResponseChange <- behavdata %>%
filter(!is.na(response)) %>%
group_by(ID, category) %>%
summarise(meanResponse = mean(response)) %>%
spread(category, meanResponse) %>%
mutate(meanResponseChange = joke-nonjoke)
####
# Signal change
####
jokeSigChange <- allSigChange %>%
filter(contrastName == 'joke-lit', Group == 'ToM', task == 'Jokes', ROIName == 'LocalizerAverage')
#Merge the datasets!
bb <- merge(jokeResponseChange, jokeSigChange, by=c('ID'))
## REPORT STATS
#E2 result - these are not highly correlated.
cor(bb$meanResponseChange, bb$sigChange)
## Added an LM (no random slopes/intercepts! just 1 value/person)
m1 <- lm(sigChange ~ meanResponseChange, data = bb)
m0 <- lm(sigChange ~ 1, data = bb)
anova(m1,m0)
## MAKE PRETTY GRAPH
setwd("./figs")
coef(lm(meanResponseChange ~ sigChange, data = bb))
ggplot(data=bb, aes(y=sigChange, x=meanResponseChange)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
scale_y_continuous(limits = c(-0.25, 0.50), breaks = seq(-0.25, 0.50, 0.25)) +
scale_x_continuous(limits = c(0, 1.75), breaks = seq(0, 2, 0.5)) +
xlab('average rating response \n(Jokes - Non-jokes)') +
ylab('avg. % signal change \n(Jokes - Non-jokes)') +
theme_bw() +
ggsave(filename="behav_activation.jpg", width=3, height=3)
######################
#Make the behavioral graphs for basic response times and ratings (note, superseded by the composite version
#of this figure)
# Drop NA response
behavdata <- filter(behavdata, !is.na(RT)) %>%
filter(!is.na(response))
####
# RT
####
#Get average RTs per category per participant
avgRT <- behavdata %>%
group_by(ID, category) %>%
summarise(meanRT = mean(RT))
#T test
t.test(meanRT ~ category, data=avgRT)
#Response times are not different by condition
####
# Ratings
####
#Get average ratings per category per participant
behavdata$response <- as.numeric(as.character(behavdata$response))
avgResponse <- behavdata %>%
group_by(ID, category) %>%
summarise(meanResponse = mean(response))
t.test(meanResponse ~ category, data=avgResponse)
#Responses are different by condition! The jokes are funny!
####
# Graphs!
####
#sterr <- function(mylist){
#  my_se = sd(mylist)/sqrt(length(mylist))
#
#  return(my_se)
#}
#Edit! We should be doing bootstrapped 95% confidence intervals instead! calculate them from allSigChange
#then merge into mystats
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
#Make the organized data for ggplot
avgRT <- ungroup(avgRT)
avgResponse <- ungroup(avgResponse)
#plot millisecnds
avgRT$meanRT <- avgRT$meanRT * 1000
#rename categories
avgRT$categoryLabel <- ""
avgRT[avgRT$category == "joke",]$categoryLabel <- "Jokes"
avgRT[avgRT$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
avgResponse$categoryLabel <- ""
avgResponse[avgResponse$category == "joke",]$categoryLabel <- "Jokes"
avgResponse[avgResponse$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
toPlotRT = avgRT %>%
group_by(categoryLabel)%>%
summarise(mean = mean(meanRT))
tobootUp = avgRT %>%
group_by(categoryLabel)%>%
summarise(bootup = bootup(meanRT))
tobootDown = avgRT %>%
group_by(categoryLabel)%>%
summarise(bootdown = bootdown(meanRT))
#toPlotRT = merge(toPlotRT, toStr)
#toPlotRT$se_up <- toPlotRT$mean + toPlotRT$sterr
#toPlotRT$se_down <- toPlotRT$mean - toPlotRT$sterr
toPlotRT = merge(toPlotRT, tobootUp)
toPlotRT = merge(toPlotRT, tobootDown)
toPlotResp = avgResponse %>%
group_by(categoryLabel)%>%
summarise(mean = mean(meanResponse))
#toStr = avgResponse %>%
#  group_by(categoryLabel)%>%
#  summarise(sterrRes = sterr(meanResponse))
#toPlotResp = merge(toPlotResp, toStr)
#toPlotResp$se_up <- toPlotResp$mean + toPlotResp$sterr
#toPlotResp$se_down <- toPlotResp$mean - toPlotResp$sterr
tobootUp = avgResponse %>%
group_by(categoryLabel)%>%
summarise(bootup = bootup(meanResponse))
tobootDown = avgResponse %>%
group_by(categoryLabel)%>%
summarise(bootdown = bootdown(meanResponse))
toPlotResp = merge(toPlotResp, tobootUp)
toPlotResp = merge(toPlotResp, tobootDown)
setwd(mywd)
View(avgRT)
View(avgResponse)
View(allSigChange)
avgRT$meanRT
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/E1_tabular_data")
avgRT_E1 = read.csv('avgRT_Behavioral_Exp1.csv')
avgResponse_E1 = read.csv('avgResponse_Behavioral_Exp1.csv')
allSigChange_E1 = read.csv('allSigChange_Exp1.csv')
allSigChange_E1 = allSigChange_E1 %>%
mutate(task = ifelse((contrastName == 'joke') | (contrastName == 'lit')| (contrastName == 'joke-lit'),
'Jokes', 'JokesCustom')) %>%
mutate(Experiment = 'Experiment 1')
allSigChange = allSigChange %>%
select(-one_of(c('participants','ID'))) %>%
mutate(Experiment = 'Experiment 2')
avgRT_E1 = avgRT_E1 %>%
mutate(ID = newSubjectName) %>%
mutate(Experiment = 'Experiment 1') %>%
select(-newSubjectName)
avgResponse_E1 = avgResponse_E1 %>%
mutate(ID = newSubjectName) %>%
mutate(Experiment = 'Experiment 1') %>%
select(-newSubjectName)
avgRT = mutate(avgRT, Experiment = 'Experiment 2')
avgResponse <- mutate(avgResponse, Experiment = 'Experiment 2')
#And merge the datasets
avgRT_E1$category <- as.factor(avgRT_E1$category)
avgResponse_E1$category <- as.factor(avgResponse_E1$category)
avgRT_E1$ID <- as.factor(avgRT_E1$ID)
avgResponse_E1$ID <- as.factor(avgResponse_E1$ID)
avgRT_E1$Experiment <- as.factor(avgRT_E1$Experiment)
avgResponse_E1$Experiment <- as.factor(avgResponse_E1$Experiment)
avgRT_E1$meanRT <- as.numeric(as.character(avgRT_E1$meanRT))
avgResponse_E1$meanResponse <- as.numeric(as.character(avgResponse_E1$meanResponse))
#And merge at last!
all_allSignalChange = merge(allSigChange, allSigChange_E1, all.x = TRUE, all.y = TRUE)
all_avgRT = merge(avgRT, avgRT_E1, all.x = TRUE, all.y = TRUE)
all_avgResponse = merge(avgResponse, avgResponse_E1, all.x = TRUE, all.y = TRUE)
#Whoops! RTs should be in milliseconds. Experiment 1 probably isn't yet.
all_avgRT[all_avgRT$Experiment == 'Experiment 1',]$meanRT <- all_avgRT[all_avgRT$Experiment == 'Experiment 1',]$meanRT * 1000
##############
#Fig 2 - behavioral, RT and funny-ness ratings
#(Borrow code from the single-study behavioral stuffs.)
#Edit! We should be doing bootstrapped 95% confidence intervals instead! calculate them from allSigChange
#then merge into mystats
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
#Make the organized data for ggplot
all_avgRT <- ungroup(all_avgRT)
all_avgResponse <- ungroup(all_avgResponse)
#rename categories
all_avgRT$categoryLabel <- ""
all_avgRT[all_avgRT$category == "joke",]$categoryLabel <- "Jokes"
all_avgRT[all_avgRT$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
all_avgResponse$categoryLabel <- ""
all_avgResponse[all_avgResponse$category == "joke",]$categoryLabel <- "Jokes"
all_avgResponse[all_avgResponse$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
toPlotRT = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(mean = mean(meanRT))
tobootUp = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootup = bootup(meanRT))
tobootDown = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootdown = bootdown(meanRT))
toPlotRT = merge(toPlotRT, tobootUp)
toPlotRT = merge(toPlotRT, tobootDown)
toPlotResp = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(mean = mean(meanResponse))
tobootUp = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootup = bootup(meanResponse))
tobootDown = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootdown = bootdown(meanResponse))
toPlotResp = merge(toPlotResp, tobootUp)
toPlotResp = merge(toPlotResp, tobootDown)
toGraph <- all_allSignalChange %>%
filter(contrastName %in% c('joke','lit', 'high', 'med','low', 'joke-lit')) %>%
mutate(newSubjName = paste(Experiment, SubjectNumber))
sterr <- function(mylist){
my_se = sd(mylist)/sqrt(length(mylist))
return(my_se)
}
mystats = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI,toGraph$contrastName, toGraph$Experiment), mean)
names(mystats) = c('Group','Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'themean')
myster = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI,toGraph$contrastName, toGraph$Experiment), sterr)
names(myster) = c('Group','Task', 'ROIName', 'ROI','contrastName', 'Experiment','sterr')
mystats = merge(mystats,myster)
mystats$se_up = mystats$themean + mystats$sterr
mystats$se_down = mystats$themean - mystats$sterr
#Edit! We should be doing bootstrapped 95% confidence intervals instead! calculate them from allSigChange
#then merge into mystats
mybootup = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI, toGraph$contrastName, toGraph$Experiment), bootup)
names(mybootup) = c('Group', 'Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'bootup')
mybootdown = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI, toGraph$contrastName, toGraph$Experiment), bootdown)
names(mybootdown) = c('Group', 'Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'bootdown')
mystats = merge(mystats,mybootup)
mystats = merge(mystats,mybootdown)
#Select the rows we want for each graph, and order them how we want! For now, localizerAverage will just come first in all sets
mystats$contNo <- 1
mystats[mystats$contrastName == 'joke',]$contNo <- 1
mystats[mystats$contrastName == 'lit',]$contNo <- 2
mystats = arrange(mystats, contNo)
#Changes for prettiness
mystats[mystats$ROIName=="LocalizerAverage",]$ROIName <- "average across fROIs"
mystats$ROIName <- str_wrap(mystats$ROIName, width = 4)
mystats$contrastLabel <- mystats$contrastName
mystats[mystats$contrastName == "joke",]$contrastLabel <- "Jokes\n  "
mystats[mystats$contrastName == "lit",]$contrastLabel <- "Non-Jokes\n   "
mystats$Group <- factor(mystats$Group, levels = c("ToM", "RHLang", "MDRight", "LHLang", "MDLeft", "ToMCustom"))
mystats <- mutate(mystats, GroupLabel = ifelse(Group == "ToM", "Theory of mind network,\nRight hemisphere",
ifelse(Group == "RHLang", "Language network, \nRight hemisphere",
ifelse(Group == "MDRight", "Multiple demand network,\nRight hemisphere",
ifelse(Group == "LHLang", "Language network,\nLeft hemisphere",
ifelse(Group == "MDLeft", "Multiple demand network,\nLeft hemisphere","ToMCustom")
)))))
#ARE YOU KIDDING ME, R.  More factor order setting.
mystats$GroupLabel <- factor(mystats$GroupLabel, levels=c("Theory of mind network,\nRight hemisphere",
"Language network, \nRight hemisphere",
"Multiple demand network,\nRight hemisphere",
"Language network,\nLeft hemisphere",
"Multiple demand network,\nLeft hemisphere"
))
#Graphing function!
jokelits <- mystats %>%
filter(contrastName == 'joke-lit') %>%
select(c(GroupLabel, ROIName, Experiment, themean)) %>%
filter(ROIName != "average\nacross\nfROIs") %>%
mutate(Experiment = ifelse(Experiment == "Experiment 1", 'Experiment1', 'Experiment2')) %>%
spread(Experiment, themean) %>%
filter(ROIName != "VM\nPFC") %>% #VMPFC was dropped from E1 therefore from these comparisons
mutate(ROIName_noN = gsub("\n","", ROIName))
View(jokelits)
cor_labels <- jokelits %>%
group_by(GroupLabel) %>%
summarize(group_cor = cor(Experiment1, Experiment2, method="spearman")) %>%
mutate(my_cor_label = paste("\u03C1=", round(group_cor, 3)))
View(all_allSignalChange)
paste('sd'.)
paste('sd','asdf')
all_allSignalChange <- all_allSignalChange %>%
mutate(realSubjN = paste(Experiment, SubjectNumber))
View(all_allSignalChange)
all_allSignalChange <- all_allSignalChange %>%
mutate(realSubjN = paste(Experiment, SubjectNumber)) %>%
select(-SubjectNumber)
allSignalChange_Exploratory <- all_allSignalChange
RHLang <- filter(allSignalChange_Exploratory, Group == "RHLang", task == 'Jokes', contrastName == 'joke' | contrastName == 'lit')
RHLang <- filter(allSignalChange_Exploratory, Group == "RHLang", task == 'Jokes', contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName*Experiment + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLang)
m0 <- lmer(sigChange ~ contrastName+Experiment + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLang)
anova(m1,m0)
m1 <- lmer(sigChange ~ contrastName*Experiment + (contrastName|ROIName) + (contrastName|RealSubjN), data = RHLang)
m0 <- lmer(sigChange ~ contrastName+Experiment + (contrastName|ROIName) + (contrastName|RealSubjN), data = RHLang)
anova(m1,m0)
View(allSignalChange_Exploratory)
RHLang <- filter(allSignalChange_Exploratory, Group == "RHLang", task == 'Jokes', contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName*Experiment + (contrastName|ROIName) + (contrastName|RealSubjN), data = RHLang)
RHLang <- filter(allSignalChange_Exploratory, Group == "RHLang", task == 'Jokes', contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName*Experiment + (contrastName|ROIName) + (contrastName|realSubjN), data = RHLang)
m0 <- lmer(sigChange ~ contrastName+Experiment + (contrastName|ROIName) + (contrastName|realSubjN), data = RHLang)
anova(m1,m0)
MDRight <- filter(allSignalChange_Exploratory,  Group == "MDRight", task == 'Jokes', contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName*Experiment + (contrastName|ROIName) + (contrastName|realSubjN), data = MDRight)
m0 <- lmer(sigChange ~ contrastName+Experiment + (contrastName|ROIName) + (contrastName|realSubjN), data = MDRight)
anova(m1,m0)
ToM <- filter(allSignalChange_Exploratory,  Group == "ToM", task == 'Jokes', contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName*Experiment + (contrastName|ROIName) + (contrastName|realSubjN), data = ToM)
m0 <- lmer(sigChange ~ contrastName+Experiment + (contrastName|ROIName) + (contrastName|realSubjN), data = ToM)
anova(m1,m0)
LHLang <- filter(allSignalChange_Exploratory, Group == "LHLang", task == 'Jokes', contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName*Experiment + (contrastName|ROIName) + (contrastName|realSubjN), data = LHLang)
m0 <- lmer(sigChange ~ contrastName+Experiment + (contrastName|ROIName) + (contrastName|realSubjN), data = LHLang)
anova(m1,m0)
MDLeft <- filter(allSignalChange_Exploratory,  Group == "MDLeft", task == 'Jokes', contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName*Experiment + (contrastName|ROIName) + (contrastName|realSubjN), data = MDLeft)
m0 <- lmer(sigChange ~ contrastName+Experiment + (contrastName|ROIName) + (contrastName|realSubjN), data = MDLeft)
anova(m1,m0)
