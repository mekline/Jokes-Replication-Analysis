#and reorganizes the data into proper longform. Take your analysis from there or save the result in a csv.
#Here, the csvs get saved back to the mean_signal folder for tidyness
####
#Stuff to change!
myResultsPath = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/meansignal_outputs/'
myOutputPath = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Analysis Repository/Analyses_paper/'
whichResults = 'ToMfROIS_resp_Jokes_preliminary_20170612'; #Change this to the set of results to analyse!
toSave = 1
####
#Leave the rest alone unless you're feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(paste(myResultsPath,whichResults, sep=""))
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1)
lastsub = ncol(myfile)
myfile= myfile[complete.cases(myfile[,lastsub]),]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
#Optional: print back out a nice file with a more informative name.
if(toSave){
setwd(myOutputPath)
myFileName = paste(whichResults,'.csv', sep="")
zz <- file(myFileName, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
pwd
getwd
getwd()
#load_spmss_results
#
#This file loads the output of one of the results.csv files produced by the (mean signal) toolbox scripts into R.
#If I knew more about the mat file produced you could probably get all of this stuff out of
#there too.  But anyway this gets the mROI_data.csv file, sorts out its structure
#and reorganizes the data into proper longform. Take your analysis from there or save the result in a csv.
#Here, the csvs get saved back to the mean_signal folder for tidyness
####
#Stuff to change!
myResultsPath = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/meansignal_outputs/'
myOutputPath = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/meansignal_outputs/'
whichResults = 'ToMfROIS_resp_Jokes_preliminary_20170612'; #Change this to the set of results to analyse!
toSave = 1
####
#Leave the rest alone unless you're feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(paste(myResultsPath,whichResults, sep=""))
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1)
lastsub = ncol(myfile)
myfile= myfile[complete.cases(myfile[,lastsub]),]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
#Optional: print back out a nice file with a more informative name.
if(toSave){
setwd(myOutputPath)
myFileName = paste(whichResults,'.csv', sep="")
zz <- file(myFileName, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
#load_spmss_results
#
#This file loads the output of one of the results.csv files produced by the (mean signal) toolbox scripts into R.
#If I knew more about the mat file produced you could probably get all of this stuff out of
#there too.  But anyway this gets the mROI_data.csv file, sorts out its structure
#and reorganizes the data into proper longform. Take your analysis from there or save the result in a csv.
#Here, the csvs get saved back to the mean_signal folder for tidyness
####
#Stuff to change!
myResultsPath = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/meansignal_outputs/'
myOutputPath = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/meansignal_outputs/'
whichResults = 'ToMfROIS_resp_ToM_preliminary_20170612'; #Change this to the set of results to analyse!
toSave = 1
####
#Leave the rest alone unless you're feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(paste(myResultsPath,whichResults, sep=""))
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1)
lastsub = ncol(myfile)
myfile= myfile[complete.cases(myfile[,lastsub]),]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
#Optional: print back out a nice file with a more informative name.
if(toSave){
setwd(myOutputPath)
myFileName = paste(whichResults,'.csv', sep="")
zz <- file(myFileName, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
getwd()
#This file reads in ALL the %-signal-change values, per-participant, per-parcel, per-contrast,
# Those %-signal-change calculations are produced by the awesome toolbox analyses, and represent a single overall calculation
#derived for the whole parcel region (not individual voxels, as mk sometimes forgets)
rm(list = ls())
library(bootstrap)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
packrat.status()
packrat::status()
packrat::init()
#load_spmss_results
#
#This file loads the output of one of the results.csv files produced by the (mean signal) toolbox scripts into R.
#If I knew more about the mat file produced you could probably get all of this stuff out of
#there too.  But anyway this gets the mROI_data.csv file, sorts out its structure
#and reorganizes the data into proper longform. Take your analysis from there or save the result in a csv.
#Here, the csvs get saved back to the mean_signal folder for tidyness
####
#Stuff to change!
myResultsPath = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/meansignal_outputs/'
myOutputPath = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/meansignal_outputs/'
whichResults = 'ToMfROIS_resp_ToM_preliminary_20170612'; #Change this to the set of results to analyse!
toSave = 1
####
#Leave the rest alone unless you're feeling fancy
library(dplyr)
library(tidyr)
library(stringr)
setwd(paste(myResultsPath,whichResults, sep=""))
#Open the weirdly formatted files and get just the table we want.
myfile  = read.csv('spm_ss_mROI_data.csv',sep=',', skip=1)
lastsub = ncol(myfile)
myfile= myfile[complete.cases(myfile[,lastsub]),]#drop things past the individual % changes....
#To add: Look at the # of ROI parcels and their sizes, declare this to be a particular
#localizer, provide names for parcels. Also could add all that as an optional function arg.
extract_val <- function(mystring, mynum){# fn to extract subject & contrast numbers
foo = str_split(mystring, "\\.")
myval = unlist(foo[[1]][mynum])
return(myval)
}
#Make the data beautiful and longform.
myfile[] <- lapply(myfile, as.character) #(Everything's a string, no factors)
myfile <- myfile %>%
gather("Subject_and_Cont", "sigChange", Subject.1.1.:ncol(myfile)) %>%
rowwise() %>%
mutate(SubjectNumber = extract_val(Subject_and_Cont, 2)) %>%
mutate(Contrast = extract_val(Subject_and_Cont, 3)) %>%
select(-Subject_and_Cont) %>%
rename(ROI = ROI.)
#Optional: print back out a nice file with a more informative name.
if(toSave){
setwd(myOutputPath)
myFileName = paste(whichResults,'.csv', sep="")
zz <- file(myFileName, "w")
write.csv(myfile, zz, row.names=FALSE)
close(zz)
}
rm(list = ls())
library(bootstrap)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
########
#READ IN DATA
########
#Here, we read in all those files, calculate a whole passle of mean and standard error bars, and then make graphs
# Add in the contrast and ROI names so it's not just numbers!!!!! (This ordering comes from the
# standard ordering produced by the 2nd level analyses; we'll arrange differently in the plots)
RHLangROI.Names = c('RPost Temp', 'RAnt Temp', 'RAngG', 'RIFG',      'RMFG',     'RIFG orb');
LangROI.Names = c('LPost Temp', 'LAnt Temp', 'LAngG', 'LIFG',      'LMFG',     'LIFG orb');
MDROI.Names = c('LIFG op',  'RIFG op', 'LMFG',    'RMFG',    'LMFG orb',
'RMFG orb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LPar Inf', 'RPar Inf', 'LPar Sup',
'RPar Sup', 'LACC',   'RACC');
ToMROI.Names = c('DM PFC', 'LTPJ',  'MM PFC', 'PC',
'RTPJ',  'VM PFC', 'RSTS');
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high','other')
myResults = read.csv(paste(meansig_outputs_folder, 'ToMfROIS_resp_Jokes_preliminary_20170612.csv', sep='')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM') #%>%
#filter(ROIName !="VM PFC")
#allSigChange = rbind(allSigChange, myResults)
allSigChange = myResults
#Little extra for ToM: Remove the VMPFC because it did not replicate the basic localizer finding.
myResults = read.csv(paste(meansig_outputs_folder, 'ToMfROIS_resp_Jokes_preliminary_20170612.csv', sep='')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM') #%>%
# filter(ROIName !="VM PFC")
# allSigChange = rbind(allSigChange, myResults)
allSigChange = myResults
myResults = read.csv(paste(meansig_outputs_folder, 'ToMfROIS_resp_Jokes_preliminary_20170612.csv', sep='')%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM')
#Little extra for ToM: Remove the VMPFC because it did not replicate the basic localizer finding.
myResults = read.csv(paste(meansig_outputs_folder, 'ToMfROIS_resp_Jokes_preliminary_20170612.csv', sep=''))%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM')
# %>%
# filter(ROIName !="VM PFC")
# allSigChange = rbind(allSigChange, myResults)
allSigChange = myResults
myResults = read.csv(paste(meansig_outputs_folder, 'ToMfROIS_resp_Jokes_preliminary_20170612.csv', sep=''))%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM')
meansig_outputs_folder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/meansignal_outputs/'
myResults = read.csv(paste(meansig_outputs_folder, 'ToMfROIS_resp_Jokes_preliminary_20170612.csv', sep=''))%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM')
allSigChange = myResults
#First, in addition to the by-region signal changes, we are going to give each person an average signal change value for each localizer
avgSigChange = aggregate(allSigChange$sigChange, by=list(allSigChange$Group,allSigChange$SubjectNumber,allSigChange$contrastName), mean)
names(avgSigChange) = c('Group','SubjectNumber', 'contrastName','sigChange')
avgSigChange$ROIName = 'LocalizerAverage'
avgSigChange$ROI = 0
allSigChange <- allSigChange %>%
dplyr::select(one_of(c('Group','ROIName', 'ROI','SubjectNumber', 'contrastName','sigChange')))
allSigChange <- rbind(allSigChange, avgSigChange)
#Drop the contrasts we're not interested in...
toGraph = allSigChange %>%
filter(contrastName %in% c('joke','lit','high','med','low'))
#Next, get the table that we'll be making the graphs from: for each region (including the average region), take all
#the individual signal changes and calculate a mean and a standard error
sterr <- function(mylist){
my_se = sd(mylist)/sqrt(length(mylist))
return(my_se)
}
mystats = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$ROIName, toGraph$ROI,toGraph$contrastName), mean)
names(mystats) = c('Group','ROIName', 'ROI','contrastName', 'themean')
myster = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$ROIName, toGraph$ROI,toGraph$contrastName), sterr)
names(myster) = c('Group','ROIName', 'ROI','contrastName', 'sterr')
mystats = merge(mystats,myster)
mystats$se_up = mystats$themean + mystats$sterr
mystats$se_down = mystats$themean - mystats$sterr
#Print out a simple summary for mega-graphs
avgz <- filter(mystats, ROIName == 'LocalizerAverage')
avgz
#Edit! We should be doing bootstrapped 95% confidence intervals instead! calculate them from allSigChange
#then merge into mystats
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
mybootup = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$ROIName, toGraph$ROI, toGraph$contrastName), bootup)
names(mybootup) = c('Group','ROIName', 'ROI','contrastName', 'bootup')
mybootdown = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$ROIName, toGraph$ROI, toGraph$contrastName), bootdown)
names(mybootdown) = c('Group','ROIName', 'ROI','contrastName', 'bootdown')
mystats = merge(mystats,mybootup)
mystats = merge(mystats,mybootdown)
#########
# Effect size reports
#########
#For the main analysis in the paper (signal change jokes>nonjokes) we'll report  a simple measure of effect size: the
#mean signal change in each system. Here they are:
eff <- mystats %>%
filter(ROIName == 'LocalizerAverage') %>%
filter(contrastName == 'joke' | contrastName == 'lit') %>%
dplyr::select(Group, contrastName,themean) %>%
spread(contrastName, themean) %>%
mutate(sigChange = joke-lit)
eff
setwd("./figs")
#Select the rows we want for each graph, and order them how we want! For now, localizerAverage will just come first in all sets
mystats$contNo <- 1
mystats[mystats$contrastName == 'joke',]$contNo <- 1
mystats[mystats$contrastName == 'lit',]$contNo <- 2
mystats[mystats$contrastName == 'high',]$contNo <- 1
mystats[mystats$contrastName == 'med',]$contNo <- 2
mystats[mystats$contrastName == 'low',]$contNo <- 3
#mystats = arrange(mystats, ROI)
mystats = arrange(mystats, contNo)
#Add a new col grouping to separate out the localizer average
mystats$ROIGroup <- ""
mystats[mystats$ROIName == "LocalizerAverage",]$ROIGroup <- "across fROIs"
mystats = arrange(mystats, desc(ROIGroup))
#Changes for prettiness
mystats[mystats$ROIName=="LocalizerAverage",]$ROIName <- "average across fROIs"
mystats$ROIName <- str_wrap(mystats$ROIName, width = 4)
mystats$contrastLabel <- mystats$contrastName
mystats[mystats$contrastName == "joke",]$contrastLabel <- "Jokes\n  "
mystats[mystats$contrastName == "lit",]$contrastLabel <- "Non-jokes\n   "
mystats[mystats$contrastName == "high",]$contrastLabel <- "high\n  "
mystats[mystats$contrastName == "med",]$contrastLabel <- "med\n   "
mystats[mystats$contrastName == "low",]$contrastLabel <- "low\n  "
ToM = filter(mystats, Group == 'ToM')
ToM <- ToM[order(ToM$ROI),]
ToM$PresOrder = c(1,2,3,4,9,10,5,6,7,8,11,12,13,14)
ToM <- ToM[order(ToM$PresOrder),]
ToM = arrange(ToM, desc(ROIGroup))
ToM = filter(mystats, Group == 'ToM')
ToM <- ToM[order(ToM$ROI),]
# ToM$PresOrder = c(1,2,3,4,9,10,5,6,7,8,11,12,13,14) This is for when VMPFC is NOT included
ToM$PresOrder = c(1,2,3,4,9,10,5,6,7,8,11,12,13,14,15,16) #This is for all contrasts
ToM <- ToM[order(ToM$PresOrder),]
ToM = arrange(ToM, desc(ROIGroup))
makeBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$ROIGroup <- factor(plotData$ROIGroup, levels = unique(plotData$ROIGroup))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste(plotData$Group[1], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=ROIName, y=themean, fill=contrastLabel)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 2.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
facet_grid(~ROIGroup, scale='free_x', space='free_x') +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=length(unique(plotData$ROIName))*2.2, height=6.1)
}
makeBar(ToM, -0.5, 1)
myResults = read.csv(paste(meansig_outputs_folder, 'ToMfROIS_resp_ToM_preliminary_20170612.csv', sep=''))%>%
mutate(ROIName = ToMROI.Names[ROI]) %>%
mutate(contrastName = normal.contrasts[Contrast]) %>%
mutate(Group = 'ToM')
# %>%
# filter(ROIName !="VM PFC")
# allSigChange = rbind(allSigChange, myResults)
allSigChange = myResults
#First, in addition to the by-region signal changes, we are going to give each person an average signal change value for each localizer
avgSigChange = aggregate(allSigChange$sigChange, by=list(allSigChange$Group,allSigChange$SubjectNumber,allSigChange$contrastName), mean)
names(avgSigChange) = c('Group','SubjectNumber', 'contrastName','sigChange')
avgSigChange$ROIName = 'LocalizerAverage'
avgSigChange$ROI = 0
allSigChange <- allSigChange %>%
dplyr::select(one_of(c('Group','ROIName', 'ROI','SubjectNumber', 'contrastName','sigChange')))
allSigChange <- rbind(allSigChange, avgSigChange)
#Drop the contrasts we're not interested in...
toGraph = allSigChange %>%
filter(contrastName %in% c('joke','lit','high','med','low'))
#Next, get the table that we'll be making the graphs from: for each region (including the average region), take all
#the individual signal changes and calculate a mean and a standard error
sterr <- function(mylist){
my_se = sd(mylist)/sqrt(length(mylist))
return(my_se)
}
mystats = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$ROIName, toGraph$ROI,toGraph$contrastName), mean)
names(mystats) = c('Group','ROIName', 'ROI','contrastName', 'themean')
myster = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$ROIName, toGraph$ROI,toGraph$contrastName), sterr)
names(myster) = c('Group','ROIName', 'ROI','contrastName', 'sterr')
mystats = merge(mystats,myster)
mystats$se_up = mystats$themean + mystats$sterr
mystats$se_down = mystats$themean - mystats$sterr
#Print out a simple summary for mega-graphs
avgz <- filter(mystats, ROIName == 'LocalizerAverage')
write.csv(avgz, 'jokes_localizer_avg.csv')
#Edit! We should be doing bootstrapped 95% confidence intervals instead! calculate them from allSigChange
#then merge into mystats
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
mybootup = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$ROIName, toGraph$ROI, toGraph$contrastName), bootup)
names(mybootup) = c('Group','ROIName', 'ROI','contrastName', 'bootup')
mybootdown = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$ROIName, toGraph$ROI, toGraph$contrastName), bootdown)
names(mybootdown) = c('Group','ROIName', 'ROI','contrastName', 'bootdown')
mystats = merge(mystats,mybootup)
mystats = merge(mystats,mybootdown)
#########
# Effect size reports
#########
#For the main analysis in the paper (signal change jokes>nonjokes) we'll report  a simple measure of effect size: the
#mean signal change in each system. Here they are:
eff <- mystats %>%
filter(ROIName == 'LocalizerAverage') %>%
filter(contrastName == 'joke' | contrastName == 'lit') %>%
dplyr::select(Group, contrastName,themean) %>%
spread(contrastName, themean) %>%
mutate(sigChange = joke-lit)
#########
# Graphs!
eff
#Now we can use the information stored in mystats to make pretty graphs! This could be done in excel too by printing mystats
#Change to figs output folder
setwd("./figs")
#Select the rows we want for each graph, and order them how we want! For now, localizerAverage will just come first in all sets
mystats$contNo <- 1
mystats[mystats$contrastName == 'joke',]$contNo <- 1
mystats[mystats$contrastName == 'lit',]$contNo <- 2
mystats[mystats$contrastName == 'high',]$contNo <- 1
mystats[mystats$contrastName == 'med',]$contNo <- 2
mystats[mystats$contrastName == 'low',]$contNo <- 3
#mystats = arrange(mystats, ROI)
mystats = arrange(mystats, contNo)
#Add a new col grouping to separate out the localizer average
mystats$ROIGroup <- ""
mystats[mystats$ROIName == "LocalizerAverage",]$ROIGroup <- "across fROIs"
mystats = arrange(mystats, desc(ROIGroup))
#Changes for prettiness
mystats[mystats$ROIName=="LocalizerAverage",]$ROIName <- "average across fROIs"
mystats$ROIName <- str_wrap(mystats$ROIName, width = 4)
mystats
ToM = filter(mystats, Group == 'ToM')
ToM <- ToM[order(ToM$ROI),]
# ToM$PresOrder = c(1,2,3,4,9,10,5,6,7,8,11,12,13,14) This is for when VMPFC is NOT included
ToM$PresOrder = c(1,2,3,4,9,10,5,6,7,8,11,12,13,14,15,16) #This is for all contrasts
ToM <- ToM[order(ToM$PresOrder),]
ToM = arrange(ToM, desc(ROIGroup))
ToM
ToM$ContrastName
ToM$ContrastNames
ToM[ToM$contrastName == 'joke',]$contrastName = 'bel'
ToM$contrastName
ToM[ToM$contrastName == 'lit',]$contrastName = 'pho'
makeBar(ToM, -0.5, 1)
ToM = filter(mystats, Group == 'ToM')
ToM <- ToM[order(ToM$ROI),]
# ToM$PresOrder = c(1,2,3,4,9,10,5,6,7,8,11,12,13,14) This is for when VMPFC is NOT included
ToM$PresOrder = c(1,2,3,4,9,10,5,6,7,8,11,12,13,14,15,16) #This is for all contrasts
ToM <- ToM[order(ToM$PresOrder),]
ToM = arrange(ToM, desc(ROIGroup))
ToM$contrastName
ToM[ToM$contrastName == 'lit',]$contrastName = 'pho'
ToM[ToM$contrastName == 'joke',]$contrastName = 'bel'
ToM$contrastName
ToM
makeBar(ToM, -0.5, 1)
makeBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$ROIGroup <- factor(plotData$ROIGroup, levels = unique(plotData$ROIGroup))
#plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste(plotData$Group[1], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=ROIName, y=themean, fill=contrastName)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 2.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
facet_grid(~ROIGroup, scale='free_x', space='free_x') +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=length(unique(plotData$ROIName))*2.2, height=6.1)
}
makeBar(ToM, -0.5, 1)
