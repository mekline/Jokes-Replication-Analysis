#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_AllRegions_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~GroupLabel) +
theme_bw() +
theme(legend.key = element_blank()) +
#theme(strip.background = element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=9, height=4)
}
#Localizer averages only, regular condition assignment
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline/figs")
mylocs = mystats %>%
filter(ROIName == 'average\nacross\nfROIs') %>%
filter(contrastName %in% c('joke','lit'))
makeBar(mylocs)
mylocs
mybootup = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI, toGraph$contrastName, toGraph$Experiment), bootup)
names(mybootup) = c('Group', 'Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'bootup')
mybootdown = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI, toGraph$contrastName, toGraph$Experiment), bootdown)
names(mybootdown) = c('Group', 'Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'bootdown')
mystats = merge(mystats,mybootup)
mystats = merge(mystats,mybootdown)
#Select the rows we want for each graph, and order them how we want! For now, localizerAverage will just come first in all sets
mystats$contNo <- 1
mystats[mystats$contrastName == 'joke',]$contNo <- 1
mystats[mystats$contrastName == 'lit',]$contNo <- 2
mystats = arrange(mystats, contNo)
#Changes for prettiness
mystats[mystats$ROIName=="LocalizerAverage",]$ROIName <- "average across fROIs"
mystats$ROIName <- str_wrap(mystats$ROIName, width = 4)
mystats$contrastLabel <- mystats$contrastName
mystats[mystats$contrastName == "joke",]$contrastLabel <- "Jokes\n  "
mystats[mystats$contrastName == "lit",]$contrastLabel <- "Non-Jokes\n   "
mystats$Group <- factor(mystats$Group, levels = c("ToM", "RHLang", "MDRight", "LHLang", "MDLeft", "ToMCustom"))
mystats <- mutate(mystats, GroupLabel = ifelse(Group == "ToM", "Theory of mind network,\nRight hemisphere",
ifelse(Group == "RHLang", "Language network, \nRight hemisphere",
ifelse(Group == "MDRight", "Multiple demand network,\nRight hemisphere",
ifelse(Group == "LHLang", "Language network,\nLeft hemisphere",
ifelse(Group == "MDLeft", "Multiple demand network,\nLeft hemisphere","ToMCustom")
)))))
#ARE YOU KIDDING ME, R.  More factor order setting.
mystats$GroupLabel <- factor(mystats$GroupLabel, levels=c("Theory of mind network,\nRight hemisphere",
"Language network, \nRight hemisphere",
"Multiple demand network,\nRight hemisphere",
"Language network,\nLeft hemisphere",
"Multiple demand network,\nLeft hemisphere"
))
#Graphing function!
makeBar = function(plotData,ylow=-0.4,yhigh=3, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_AllRegions_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~GroupLabel) +
theme_bw() +
theme(legend.key = element_blank()) +
#theme(strip.background = element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=9, height=4)
}
#Localizer averages only, regular condition assignment
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline/figs")
mylocs = mystats %>%
filter(ROIName == 'average\nacross\nfROIs') %>%
filter(contrastName %in% c('joke','lit'))
makeBar(mylocs)
mylocs
mystats
toGraph <- all_allSignalChange %>%
filter(contrastName %in% c('joke','lit', 'high', 'med','low', 'joke-lit')) %>%
mutate(newSubjName = paste(Experiment, SubjectNumber))
sterr <- function(mylist){
my_se = sd(mylist)/sqrt(length(mylist))
return(my_se)
}
mystats = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI,toGraph$contrastName, toGraph$Experiment), mean)
names(mystats) = c('Group','Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'themean')
myster = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI,toGraph$contrastName, toGraph$Experiment), sterr)
names(myster) = c('Group','Task', 'ROIName', 'ROI','contrastName', 'Experiment','sterr')
mystats = merge(mystats,myster)
mystats$se_up = mystats$themean + mystats$sterr
mystats$se_down = mystats$themean - mystats$sterr
#Edit! We should be doing bootstrapped 95% confidence intervals instead! calculate them from allSigChange
#then merge into mystats
mybootup = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI, toGraph$contrastName, toGraph$Experiment), bootup)
names(mybootup) = c('Group', 'Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'bootup')
mybootdown = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI, toGraph$contrastName, toGraph$Experiment), bootdown)
names(mybootdown) = c('Group', 'Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'bootdown')
mystats = merge(mystats,mybootup)
mystats = merge(mystats,mybootdown)
#Select the rows we want for each graph, and order them how we want! For now, localizerAverage will just come first in all sets
mystats$contNo <- 1
mystats[mystats$contrastName == 'joke',]$contNo <- 1
mystats[mystats$contrastName == 'lit',]$contNo <- 2
mystats = arrange(mystats, contNo)
#Changes for prettiness
mystats[mystats$ROIName=="LocalizerAverage",]$ROIName <- "average across fROIs"
mystats$ROIName <- str_wrap(mystats$ROIName, width = 4)
mystats$contrastLabel <- mystats$contrastName
mystats[mystats$contrastName == "joke",]$contrastLabel <- "Jokes\n  "
mystats[mystats$contrastName == "lit",]$contrastLabel <- "Non-Jokes\n   "
mystats$Group <- factor(mystats$Group, levels = c("ToM", "RHLang", "MDRight", "LHLang", "MDLeft", "ToMCustom"))
mystats <- mutate(mystats, GroupLabel = ifelse(Group == "ToM", "Theory of mind network,\nRight hemisphere",
ifelse(Group == "RHLang", "Language network, \nRight hemisphere",
ifelse(Group == "MDRight", "Multiple demand network,\nRight hemisphere",
ifelse(Group == "LHLang", "Language network,\nLeft hemisphere",
ifelse(Group == "MDLeft", "Multiple demand network,\nLeft hemisphere","ToMCustom")
)))))
#ARE YOU KIDDING ME, R.  More factor order setting.
mystats$GroupLabel <- factor(mystats$GroupLabel, levels=c("Theory of mind network,\nRight hemisphere",
"Language network, \nRight hemisphere",
"Multiple demand network,\nRight hemisphere",
"Language network,\nLeft hemisphere",
"Multiple demand network,\nLeft hemisphere"
))
#Localizer averages only, regular condition assignment
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline/figs")
mylocs = mystats %>%
filter(ROIName == 'average\nacross\nfROIs') %>%
filter(contrastName %in% c('joke','lit'))
makeBar(mylocs)
makeBar = function(plotData,ylow=-0.4,yhigh=3, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_AllRegions_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~GroupLabel) +
theme_bw() +
theme(legend.key = element_blank()) +
#theme(strip.background = element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=10, height=4)
}
#Localizer averages only, regular condition assignment
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline/figs")
mylocs = mystats %>%
filter(ROIName == 'average\nacross\nfROIs') %>%
filter(contrastName %in% c('joke','lit'))
makeBar(mylocs)
makeBar = function(plotData,ylow=-0.4,yhigh=3, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_AllRegions_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~GroupLabel) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(legend.position = 'bottom') +
#theme(strip.background = element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=10, height=4)
}
#Localizer averages only, regular condition assignment
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline/figs")
mylocs = mystats %>%
filter(ROIName == 'average\nacross\nfROIs') %>%
filter(contrastName %in% c('joke','lit'))
makeBar(mylocs)
makeLine = function(plotData,ylow=-0.1,yhigh=0.6, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_EffectSizeLine_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, color=Experiment)) +
geom_errorbar(aes(ymin=bootdown, ymax=bootup, colour=factor(Experiment)), width=.05, position=position_dodge(.15)) +
geom_point(stat="identity", position=position_dodge(.15)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(0, 0.5, 0.25))+
xlab('') +
ylab(str_wrap('% signal change Joke > Non-Joke', width=18)) +
scale_color_manual(name="", values=mycolors) +
facet_grid(~GroupLabel) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=9, height=2)
}
#Localizer averages only, regular condition assignment
mylocs = mystats %>%
filter(ROIName == 'average\nacross\nfROIs') %>%
filter(contrastName %in% c('joke-lit'))
makeLine(mylocs)
mystats[mystats$Group == 'ToMCustom',]$Group <- "ToM"
ToMCustom = filter(mystats, Group == 'ToM', Task == 'JokesCustom')
ToMCustom <- arrange(ToMCustom, contNo)
ToMCustom <- ToMCustom[order(ToMCustom$ROI),]
ToMCustom$PresOrder = c(1,2,3,4,5,6,13,14,15,7,8,9,10,11,12,16,17,18,19,20,21, 22, 23, 24)
ToMCustom <- ToMCustom[order(ToMCustom$PresOrder),]
makeRegionsBar = function(plotData,ylow=-0.5,yhigh=2.25, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
nROI = length(unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel)[c(1,3,2)])
myfi = paste('composite_', plotData$Group[2], plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 2, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~ROIName, scale='free_x', space='free_x')+
theme_bw() +
theme(legend.key = element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank()) +
theme(legend.position="none")
ggsave(filename=myfi, width=nROI+1, height=3)
}
makeRegionsBar(ToMCustom)
makeRegionsBar = function(plotData,ylow=-0.5,yhigh=2.25, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
nROI = length(unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel)[c(1,3,2)])
myfi = paste('composite_', plotData$Group[2], plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 2, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~ROIName, scale='free_x', space='free_x')+
theme_bw() +
theme(legend.key = element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank()) #+
theme(legend.position="none")
#ggsave(filename=myfi, width=nROI+1, height=3)
}
makeRegionsBar(ToMCustom)
makeRegionsBar = function(plotData,ylow=-0.5,yhigh=2.25, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
nROI = length(unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel)[c(1,3,2)])
myfi = paste('composite_', plotData$Group[2], plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 2, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~ROIName, scale='free_x', space='free_x')+
theme_bw() +
theme(legend.key = element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank()) +
theme(legend.position="bottom")
ggsave(filename=myfi, width=nROI+1, height=3)
}
makeRegionsBar(ToMCustom)
makeRegionsBar = function(plotData,ylow=-0.5,yhigh=2.25, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
nROI = length(unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel)[c(1,3,2)])
myfi = paste('composite_', plotData$Group[2], plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 2, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~ROIName, scale='free_x', space='free_x')+
theme_bw() +
theme(legend.key = element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank()) +
theme(legend.position="none")
ggsave(filename=myfi, width=nROI+1, height=3)
}
#####################################################
#
# Figures for the Supplemental - parcel by parcel graphs, for each system on the Jokes > Non-Jokes contrast
# This uses the same makeRegionsBar function, just need to organize and prettify each system here; stealing code from the original figs script
#####################################################
mystats <- mystats %>%
mutate(ROIGroup = ifelse((ROIName == "average\nacross\nfROIs"), 1, 2))
#Subsets & Ordering (elaborate code, probably can condense these; ggplot is finicky at orders)
RHLang = filter(mystats, Group == 'RHLang', Task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
RHLang <- RHLang[order(RHLang$ROI),]
RHLang$PresOrder = c(13,14, 9,10, 7,8, 11,12, 3,4,5,6,1,2) #Reorder for standard presentation!
RHLang <- RHLang[order(RHLang$PresOrder),]
RHLang = arrange(RHLang, ROIGroup)
makeRegionsBar(RHLang)
LHLang = filter(mystats, Group == 'LHLang', Task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
LHLang <- LHLang[order(LHLang$ROI),]
LHLang$PresOrder = c(13,14, 9,10, 7,8, 11,12, 3,4,5,6,1,2)
LHLang <- LHLang[order(LHLang$PresOrder),]
LHLang = arrange(LHLang, ROIGroup)
makeRegionsBar(LHLang)
MDLeft = filter(mystats, Group == 'MDLeft', Task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
MDLeft <- MDLeft[order(MDLeft$ROI),]
MDLeft = arrange(MDLeft, ROIGroup)
makeRegionsBar(MDLeft)
MDRight = filter(mystats, Group == 'MDRight', Task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
MDRight <- MDRight[order(MDRight$ROI),]
MDRight = arrange(MDRight, ROIGroup)
makeRegionsBar(MDRight)
ToM = filter(mystats, Group == 'ToM', Task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
ToM <- ToM[order(ToM$ROI),]
# ToM$PresOrder = c(1,2,3,4,9,10,5,6,7,8,11,12,13,14) This is for when VMPFC is NOT included
ToM$PresOrder = c(1,2,3,4,9,10,5,6,7,8,11,12,13,14,15,16) #This is for all contrasts
ToM <- ToM[order(ToM$PresOrder),]
ToM = arrange(ToM, ROIGroup)
makeRegionsBar(ToM)
#NOTE remember I've only done 1st levels on Custom for the non-TOM regions for Exp 2
RHLangCustom = filter(mystats, Group == 'RHLang', Task == 'JokesCustom')
RHLangCustom <- RHLangCustom[order(RHLangCustom$ROI),]
RHLangCustom$PresOrder = c(19,20,21, 13,14,15, 10,11,12, 16,17,18, 4,5,6, 7,8,9, 1,2,3) #Reorder for standard presentation!
RHLangCustom <- RHLangCustom[order(RHLangCustom$PresOrder),]
RHLangCustom = arrange(RHLangCustom, ROIGroup)
makeRegionsBar(RHLangCustom)
LHLangCustom = filter(mystats, Group == 'LHLang', Task == 'JokesCustom')
LHLangCustom <- LHLangCustom[order(LHLangCustom$ROI),]
LHLangCustom$PresOrder = c(19,20,21, 13,14,15, 10,11,12, 16,17,18, 4,5,6, 7,8,9, 1,2,3)
LHLangCustom <- LHLangCustom[order(LHLangCustom$PresOrder),]
LHLangCustom = arrange(LHLangCustom, ROIGroup)
makeRegionsBar(LHLangCustom)
MDRightCustom = filter(mystats, Group == 'MDRight', Task == 'JokesCustom')
MDRightCustom <- MDRightCustom[order(MDRightCustom$ROI),]
MDRightCustom = arrange(MDRightCustom, ROIGroup)
makeRegionsBar(MDRightCustom)
MDLeftCustom = filter(mystats, Group == 'MDLeft', Task == 'JokesCustom')
MDLeftCustom <- MDLeftCustom[order(MDLeftCustom$ROI),]
MDLeftCustom = arrange(MDLeftCustom, ROIGroup)
makeRegionsBar(MDLeftCustom)
jokelits <- mystats %>%
filter(contrastName == 'joke-lit') %>%
select(c(Group, ROIName, Experiment, themean)) %>%
filter(ROIName != "average\nacross\nfROIs") %>%
mutate(Experiment = ifelse(Experiment == "Experiment 1", 'Experiment1', 'Experiment2')) %>%
spread(Experiment, themean) %>%
filter(ROIName != "VM\nPFC") #VMPFC was dropped from E1
#A Graph
ggplot(data=jokelits, aes(y=Experiment1, x=Experiment2, color = Group)) +
geom_point() +
geom_text(aes(label = ROIName)) +
facet_wrap(~ Group, ncol=2) +
geom_smooth(method="lm", se=FALSE) +
theme(legend.position="none") +
ggsave(filename="compare_activation_E1_E2.jpg", width=12, height=18)
cor(jokelits$Experiment1, jokelits$Experiment2)
main3 <- filter(jokelits, Group == 'ToM' | Group == 'RHLang' | Group == 'MDRight')
cor(main3$Experiment1, main3$Experiment2)
allcors <- jokelits %>%
group_by(Group) %>%
summarize(cor(Experiment1, Experiment2))
allcors
allSigChange = read.csv(paste(meansig_outputs_folder, 'all_mean_signal_outputs.csv', sep=''))
allSigChange = allSigChange %>%
filter(ind_selection_method == 'Top10Percent') %>%
filter(filename %in% c('SplitHalf_RHLfROIs_resp_Jokes_20170904',
'SplitHalf_LangfROIs_resp_Jokes_20170904',
'SplitHalf_MDfROIs_resp_Jokes_20170904',
'SplitHalf_ToMfROIs_resp_Jokes_20170904')) %>%
mutate(task = 'Jokes') %>%  #Oops, the parser messed up these names, fix'em!
mutate(fROIs = ifelse(filename == 'SplitHalf_RHLfROIs_resp_Jokes_20170904', 'RHLfROIs',
ifelse(filename == 'SplitHalf_LangfROIs_resp_Jokes_20170904', 'LangfROIs',
ifelse(filename == 'SplitHalf_MDfROIs_resp_Jokes_20170904', 'MDfROIs', 'ToMfROIs'))))
# List contrast and ROI names so it's not just numbers!!!!! (This ordering comes from the
# standard ordering produced by the 2nd level analyses; we'll arrange differently in the plots)
RHLangROI.Names = c('RPost Temp', 'RAnt Temp', 'RAngG', 'RIFG',      'RMFG',     'RIFG orb');
LangROI.Names = c('LPost Temp', 'LAnt Temp', 'LAngG', 'LIFG',      'LMFG',     'LIFG orb');
MDROI.Names = c('LIFG op',  'RIFG op', 'LMFG',    'RMFG',    'LMFG orb',
'RMFG orb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LPar Inf', 'RPar Inf', 'LPar Sup',
'RPar Sup', 'LACC',   'RACC');
ToMROI.Names = c('DM PFC', 'LTPJ',  'MM PFC', 'PC',
'RTPJ',  'VM PFC', 'RSTS');
splithalf.contrasts = c('ODD_joke-lit', 'EVEN_joke-lit')
#Split the data into groups by fROIs, and rename them as appropriate
RHLang_sigs = data.frame(NULL)
LHLang_sigs = data.frame(NULL)
MD_sigs = data.frame(NULL)
ToM_sigs = data.frame(NULL)
RHLang_sigs = allSigChange %>%
filter(fROIs == 'RHLfROIs')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = splithalf.contrasts[Contrast]) %>%
mutate(Group = 'RHLang') %>%
ungroup()
LHLang_sigs = allSigChange %>%
filter(fROIs == 'LangfROIs')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = splithalf.contrasts[Contrast]) %>%
mutate(Group = 'LHLang') %>%
ungroup()
MD_sigs = allSigChange %>%
filter(fROIs == 'MDfROIs')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = splithalf.contrasts[Contrast]) %>%
mutate(Group = ifelse(ROI %%2 == 1, 'MDLeft','MDRight')) %>%
ungroup()
ToM_sigs = allSigChange %>%
filter(fROIs == 'ToMfROIs')%>% ##Typo in all the filenames!
mutate(ROIName = ToMROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = splithalf.contrasts[Contrast]) %>%
mutate(Group = 'ToM') %>%
ungroup()
#And stick it all back together!!
splitHalfSigChange = rbind(RHLang_sigs, LHLang_sigs, MD_sigs, ToM_sigs)
##################
#Now, to do some split half visualizations and analyses.
##################
#get the data in shape for some correlations! That means: each observation (human) has 10 * nROI values - odd and even in each fROI in each region
splitHalfSigChange = splitHalfSigChange %>%
select(c(SubjectNumber, Group, ROIName, contrastName, sigChange)) %>%
unite(myEntry, Group, ROIName, contrastName, sep=".") %>%
spread(myEntry, sigChange) %>%
select(-c(SubjectNumber))
#World's biggest correlation matrix! Each humans' numbers get correlated here.
#Whoa! We'll be doing some subsetting...this sure is dumb since I unified the columns above, but oh well.
cormat <- cor(splitHalfSigChange, use='pairwise.complete.obs')
melted_cormat <- melt(cormat) %>%
separate(Var1, into = c('Group1','ROIName1','contrastName1'), sep = '\\.') %>%
separate(Var2, into = c('Group2','ROIName2','contrastName2'), sep = '\\.')
#Rule: only compare across odds and evens, not fROI_12 at ODD and fROI_13 and ODD.
#Then, average those two values together. This lets us fairly compare
#self-to-self correlations with self-to-other correlations
odd_even <- melted_cormat %>%
filter(contrastName1 != contrastName2) %>%
select(one_of('Group1','Group2','ROIName1','ROIName2','value')) %>%
group_by(Group1, Group2, ROIName1, ROIName2) %>%
summarise(meancorr = mean(value))
#odd_even is the *mean across people* at each individual ROI
ggplot(data = odd_even, aes(x=ROIName1, y=ROIName2, fill=meancorr)) +
geom_tile() +
facet_wrap(Group1 ~ Group2, scales="free")
ggplot(data = odd_even, aes(x=ROIName1, y=ROIName2, fill=meancorr)) +
geom_tile() +
facet_wrap(Group1 ~ Group2, scales="free")
system_avg = odd_even %>%
group_by(Group1, Group2) %>%
summarise(meancorr = mean(meancorr))
#We'd like to put hemispheres of systems together here, since they are actually correlated!
system_avg$Group1 <-factor(system_avg$Group1, levels = c('RHLang','LHLang','MDRight','MDLeft','ToM'))
system_avg$Group2 <-factor(system_avg$Group2, levels = c('RHLang','LHLang','MDRight','MDLeft','ToM'))
ggplot(data = system_avg, aes(x=Group1, y=Group2, fill=meancorr)) +
geom_tile()
