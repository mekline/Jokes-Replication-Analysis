theme(legend.position="none")
ggsave(filename=myfi, width=nROI+1, height=3)
}
makeRegionsBar(ToMCustom)
#####################################################
#
# Figures for the Supplemental - parcel by parcel graphs, for each system on the Jokes > Non-Jokes contrast
# This uses the same makeRegionsBar function, just need to organize and prettify each system here; stealing code from the original figs script
#####################################################
mystats <- mystats %>%
mutate(ROIGroup = ifelse((ROIName == "average\nacross\nfROIs"), 1, 2))
#Subsets & Ordering (elaborate code, probably can condense these; ggplot is finicky at orders)
#RHLang
RHLang = filter(mystats, ROIMask == 'RHLang', task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
RHLang$ROIName = factor(RHLang$ROIName, levels = c("average\nacross\nfROIs",
"RAngG","RAntTemp","RIFG",
"RIFGorb","RMFG","RPostTemp"))
RHLang = arrange(RHLang, ROIName)
RHLang = arrange(RHLang, ROIGroup)
makeRegionsBar(RHLang)
#LHLang
LHLang = filter(mystats, ROIMask == 'LHLang', task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
LHLang$ROIName = factor(LHLang$ROIName, levels = c("average\nacross\nfROIs",
"LAngG","LAntTemp","LIFG",
"LIFGorb","LMFG","LPostTemp"))
LHLang = arrange(LHLang, ROIName)
LHLang = arrange(LHLang, ROIGroup)
makeRegionsBar(LHLang)
#MDLeft
MDLeft = filter(mystats, ROIMask == 'MDLeft', task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
MDLeft$ROIName = factor(MDLeft$ROIName, levels = c("average\nacross\nfROIs",
"LACC","LIFGop","LInsula","LMFG",
"LParInf","LMFGorb", "LParSup","LPrecG","LSMA"))
MDLeft = arrange(MDLeft, ROIName)
MDLeft = arrange(MDLeft, ROIGroup)
makeRegionsBar(MDLeft)
MDRight = filter(mystats, ROIMask == 'MDRight', task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
MDRight$ROIName = factor(MDRight$ROIName, levels = c("average\nacross\nfROIs",
"RACC","RIFGop","RInsula","RMFG",
"RParInf","RMFGorb", "RParSup","RPrecG","RSMA"))
MDRight = arrange(MDRight, ROIName)
MDRight = arrange(MDRight, ROIGroup)
makeRegionsBar(MDRight)
ToM = filter(mystats, ROIMask == 'ToM', task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
unique(ToM$ROIName)
#ToM
ToM = filter(mystats, ROIMask == 'ToM', task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
ToM$ROIName = factor(ToMt$ROIName, levels = c("average\nacross\nfROIs",
"DMPFC", "LTPJ", "MMPFC",
"PC","RTPJ","VMPFC", "RSTS"))
ToM = arrange(ToM, ROIName)
ToM = arrange(ToM, ROIGroup)
makeRegionsBar(ToM)
ToM = filter(mystats, ROIMask == 'ToM', task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
ToM$ROIName = factor(ToM$ROIName, levels = c("average\nacross\nfROIs",
"DMPFC", "LTPJ", "MMPFC",
"PC","RTPJ","VMPFC", "RSTS"))
ToM = arrange(ToM, ROIName)
ToM = arrange(ToM, ROIGroup)
makeRegionsBar(ToM)
ToM
View(ToM)
#ToM
ToM = filter(mystats, ROIMask == 'ToM', task == 'Jokes', localizer = 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
ToM$ROIName = factor(ToM$ROIName, levels = c("average\nacross\nfROIs",
"DMPFC", "LTPJ", "MMPFC",
"PC","RTPJ","VMPFC", "RSTS"))
ToM = arrange(ToM, ROIName)
ToM = arrange(ToM, ROIGroup)
makeRegionsBar(ToM)
View(ToM)
ToM = filter(mystats, ROIMask == 'ToM', task == 'Jokes', localizer = 'ToM', (contrastName == 'joke' | contrastName == 'lit'))
ToM = filter(mystats, ROIMask == 'ToM', task == 'Jokes', localizer == 'ToM', (contrastName == 'joke' | contrastName == 'lit'))
ToM$ROIName = factor(ToM$ROIName, levels = c("average\nacross\nfROIs",
"DMPFC", "LTPJ", "MMPFC",
"PC","RTPJ","VMPFC", "RSTS"))
ToM = arrange(ToM, ROIName)
ToM = arrange(ToM, ROIGroup)
makeRegionsBar(ToM)
#Cloudy!
ToMCloudy = filter(mystats, ROIMask == 'ToM', task == 'Jokes', localizer == 'Cloudy', (contrastName == 'joke' | contrastName == 'lit'))
ToMCloudy$ROIName = factor(ToMCloudy$ROIName, levels = c("average\nacross\nfROIs",
"DMPFC", "LTPJ", "MMPFC",
"PC","RTPJ","VMPFC", "RSTS"))
ToMCloudy = arrange(ToMCloudy, ROIName)
ToMCloudy = arrange(ToMCloudy, ROIGroup)
makeRegionsBar(ToMCloudy)
makeRegionsBar(ToMCloudy, mycolors = c("gray60", "gray60"))
makeRegionsBar(ToMCloudy, mycolors = c("gray60", "gray60"), ylow=-1.5)
makeRegionsBar(ToMCloudy, mycolors = c("gray60", "gray60"), ylow=-1)
##AND NOW ALL THE SAME WITH CUSTOM RATINGS
RHLangCustom = filter(mystats, ROIMask == 'RHLang', task == 'JokesCustom', (contrastName == 'low' | contrastName == 'med' | contrastName == 'high'))
RHLangCustom$ROIName = factor(RHLangCustom$ROIName, levels = c("average\nacross\nfROIs",
"RAngG","RAntTemp","RIFG",
"RIFGorb","RMFG","RPostTemp"))
RHLangCustom = arrange(RHLangCustom, ROIName)
RHLangCustom = arrange(RHLangCustom, ROIGroup)
makeRegionsBar(RHLangCustom)
##AND NOW ALL THE SAME WITH CUSTOM RATINGS
RHLangCustom = filter(mystats, ROIMask == 'RHLang', task == 'JokesCustom', (contrastName == 'low' | contrastName == 'med' | contrastName == 'high'))
RHLangCustom$ROIName = factor(RHLangCustom$ROIName, levels = c("average\nacross\nfROIs",
"RIFGorb","RIFG","RMFG",
"RAntTemp","RPostTemp","RAngG"))
RHLangCustom = arrange(RHLangCustom, ROIName)
RHLangCustom = arrange(RHLangCustom, ROIGroup)
makeRegionsBar(RHLangCustom)
#MDLeft
MDLeftCustom = filter(mystats, ROIMask == 'MDLeft', task == 'JokesCustom', (contrastName == 'low' | contrastName == 'med' | contrastName == 'high'))
MDLeftCustom$ROIName = factor(MDLeftCustom$ROIName, levels = c("average\nacross\nfROIs",
"LIFGop","LMFG", "LMFGorb", "LPrecG",
"LInsula","LSMA","LParInf", "LParSup", "LACC"))
MDLeftCustom = arrange(MDLeftCustom, ROIName)
MDLeftCustom = arrange(MDLeftCustom, ROIGroup)
makeRegionsBar(MDLeftCustom)
#Composite graphs! Warning, this assumes you've run the Exp 2 pipeline up to this point - run all View() funs at the top to
#make sure necessary data is loaded.
#(set your own wd first)
repodir = "/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/"
analysisfolder = paste(repodir, "/analysis_pipeline", sep="")
figfolder = paste(repodir, "/analysis_pipeline/figs", sep="")
E1folder = paste(repodir, "/E1_tabular_data", sep="")
setwd(analysisfolder)
load('avgRT.RData')
load('avgResponse.RData')
load('allSigChange.RData')
##############
#Now load up the data saved from experiment 1, and adjust column names to match
#Figure making starts around line 96
##############
#avg_RT dataframe
avgRT_E1 = read.csv('avgRT_Behavioral_Exp1.csv')
avgResponse_E1 = read.csv('avgResponse_Behavioral_Exp1.csv')
allSigChange_E1 = read.csv('allSigChange_Exp1.csv')
avgRT <- avgRT%>%
ungroup() %>%
mutate(Experiment = "Experiment 2", participantID = ID)%>%
select(-ID)%>%
mutate(meanRT = 1000 * meanRT)
avgRT_E1 <- avgRT_E1 %>%
mutate(participantID = newSubjectName, Experiment = "Experiment 1") %>%
select(-newSubjectName) %>%
mutate(meanRT = 1000 * meanRT)
all_avgRT <- bind_rows(avgRT, avgRT_E1)
all_avgRT <- all_avgRT %>%
mutate(Experiment = as.factor(Experiment),
category = as.factor(category))
#avgResponse dataframe
avgResponse <- avgResponse %>%
ungroup() %>%
mutate(Experiment = 'Experiment 2', participantID = ID)%>%
select(-ID)
avgResponse_E1 <- avgResponse_E1 %>%
mutate(participantID = newSubjectName, Experiment = "Experiment 1") %>%
select(-newSubjectName)
all_avgResponse <- bind_rows(avgResponse, avgResponse_E1)
all_avgResponse <- all_avgResponse %>%
mutate(Experiment = as.factor(Experiment),
category = as.factor(category))
#allSigChange dataframe
allSigChange_E1 = allSigChange_E1 %>%
#Column renaming-dropping
mutate(Experiment = 'Experiment 1', participantID = as.factor(SubjectNumber),
filename = "not given",
ind_selection_method = "Top10Percent",
pipeline = 'Old_evlab_pipeline') %>%
select(-one_of(c("ROI", "ROI.size",
"average.localizer.mask.size",
"inter.subject.overlap", "Contrast",
"SubjectNumber")))%>% #Drop subject number, misleading between experiments!
#Convert 'Group' to Mask-localizer-task format
mutate(ROIMask = ifelse(Group %in% c("RHLang", "RHLang-toLang"), "RHLang",
ifelse(Group %in% c("LHLang","LHLang-toLang"), "LHLang",
ifelse(Group %in% c("RevLangLeft-toMD", "MDLeft"), "MDLeft",
ifelse(Group %in% c("RevLangRight-toMD", "MDRight"), "MDRight", "ToM"))))) %>%
mutate(localizer = ifelse(Group %in% c("RHLang", "LHLang", "RHLang-toLang", "LHLang-toLang"), "Lang",
ifelse(Group %in% c("MDLeft", "MDRight"), "MD",
ifelse(Group %in% c("RevLangLeft-toMD","RevLangRight-toMD"), "RevLang", "ToM")))) %>%
mutate(task = ifelse(Group %in% c("RHLang-toLang", "LHLang-toLang"), "Lang",
ifelse(Group %in% c("RevLangLeft-toMD", "RevLangRight-toMD"), "MD",
ifelse(Group %in% c("ToM-to-ToM"), "ToM",
ifelse(Group %in% c("RHLang","LHLang","MDLeft","MDRight","ToM"), "Jokes", "JokesCustom")))))%>%
select(-Group) %>%
mutate(ROIName = str_replace(ROIName, " ",""))
allSigChange = allSigChange %>%
mutate(Experiment = 'Experiment 2') %>%
select(-one_of(c("SubjectNumber", "Evlab_SubNo")))%>% #Drop subject number, misleading between experiments!
mutate(ROIName = str_replace(ROIName, " ",""))
all_allSigChange = bind_rows(allSigChange, allSigChange_E1)
#Additional cleanups in factor levels
all_allSigChange = all_allSigChange %>%
mutate(contrastName = str_replace(contrastName, "H-E", "hard-easy"))%>%
mutate(contrastName = str_replace(contrastName, "S-N", "sent-non"))%>%
mutate(contrastName = str_replace(contrastName, "E", "easy"))%>%
mutate(contrastName = str_replace(contrastName, "H", "hard"))%>%
mutate(contrastName = str_replace(contrastName, "S", "sent"))%>%
mutate(contrastName = str_replace(contrastName, "N", "non"))%>%
mutate(contrastName = str_replace(contrastName, "paramfun", "linear"))
#Oh surprise, never calculated LocalizerAverage in E1
E1avgs <- all_allSigChange %>%
filter(Experiment == "Experiment 1")%>%
group_by(ROIMask, localizer, task, contrastName, participantID) %>%
summarize(ROIName = 'LocalizerAverage', sigChange = (mean(sigChange)))%>%
mutate(Experiment = 'Experiment 1', filename = "not given", pipeline = "Old_evlab_pipeline", ind_selection_method = "Top10Percent")
all_allSigChange = bind_rows(all_allSigChange, E1avgs)
#....and repair factor columns which are now in dissaray
tofactor <- c("task", "participantID", "ROIName", "contrastName",
"ROIMask", "localizer","Experiment")
all_allSigChange[tofactor] <- lapply(all_allSigChange[tofactor], factor)
##############
#Fig 2 - behavioral, RT and funny-ness ratings
#(Borrow code from the single-study behavioral stuffs.)
#Edit! We should be doing bootstrapped 95% confid ence intervals instead! calculate them from allSigChange
#then merge into mystats
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
#Make the organized data for ggplot
all_avgRT <- ungroup(all_avgRT)
all_avgResponse <- ungroup(all_avgResponse)
#rename categories
all_avgRT$categoryLabel <- ""
all_avgRT[all_avgRT$category == "joke",]$categoryLabel <- "Jokes"
all_avgRT[all_avgRT$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
all_avgResponse$categoryLabel <- ""
all_avgResponse[all_avgResponse$category == "joke",]$categoryLabel <- "Jokes"
all_avgResponse[all_avgResponse$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
toPlotRT = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(mean = mean(meanRT))
tobootUp = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootup = bootup(meanRT))
tobootDown = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootdown = bootdown(meanRT))
toPlotRT = merge(toPlotRT, tobootUp)
toPlotRT = merge(toPlotRT, tobootDown)
toPlotResp = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(mean = mean(meanResponse))
tobootUp = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootup = bootup(meanResponse))
tobootDown = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootdown = bootdown(meanResponse))
toPlotResp = merge(toPlotResp, tobootUp)
toPlotResp = merge(toPlotResp, tobootDown)
############ Graph - Reaction time
setwd(figfolder)
ggplot(data=toPlotRT, aes(y=mean, x=categoryLabel, fill = Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(0,1200)) +
scale_y_continuous(breaks = seq(0, 2000, 200))+
xlab('') +
ylab('Response time (milliseconds)') +
scale_fill_manual(name="", values=c("gray35", "gray60")) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank()) +
theme(legend.position="none")
ggsave(filename="composite_E1_rep_behavioralrt.jpg", width=2, height=3) #ZZZconfirmed postcloudy
############Graph - Reponse (funniness)
ggplot(data=toPlotResp, aes(y=mean, x=categoryLabel, fill = Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(1,4)) +
scale_y_continuous(breaks = seq(1, 4, 1))+
xlab('') +
ylab('Average funny-ness rating') +
scale_fill_manual(name="", values=c("gray35", "gray60")) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())+
theme(strip.background = element_blank()) +
ggsave(filename="composite_E1_rep_behavioral.jpg", width=3, height=3) #ZZZconfirmed postcloudy
##############
##############
#Fig 3 - Signal change (system averages only!) in each system, by experiment
##############
toGraph <- all_allSigChange %>%
filter(contrastName %in% c('joke','lit', 'high', 'med','low', 'joke-lit'))
sterr <- function(mylist){
my_se = sd(mylist)/sqrt(length(mylist))
return(my_se)
}
# #Takes a long time, reloaded below
# mystats <- toGraph %>%
#   group_by(Experiment, ROIMask, ROIName, localizer, task, contrastName)%>%
#   summarize(themean=mean(sigChange),
#             thesterr = sterr(sigChange),
#             bootup = bootup(sigChange),
#             bootdown=bootdown(sigChange))
#
# save(mystats, file='mystats.RData')
load('mystats.RData')
#Some terrible battles with the factor ordering system happen here
#Pretty ROI names
mystats$ROIName = as.character(mystats$ROIName)
mystats[mystats$ROIName=="LocalizerAverage",]$ROIName <- "average across fROIs"
mystats$ROIName <- str_wrap(mystats$ROIName, width = 4)
#Pretty Condition labels
mystats$contrastLabel <- as.character(mystats$contrastName)
mystats[mystats$contrastName == "joke",]$contrastLabel <- "Jokes\n  "
mystats[mystats$contrastName == "lit",]$contrastLabel <- "Non-Jokes\n   "
#Pretty System naming, achieved ugli-ly
mystats <- mutate(mystats, localizerLabel = ifelse(localizer == "ToM", "Theory of mind network,\nRight hemisphere",
ifelse((localizer == "Lang" & ROIMask == "RHLang"), "Language network, \nRight hemisphere",
ifelse((localizer == "MD" & ROIMask == "MDRight"), "Multiple demand network,\nRight hemisphere",
ifelse((localizer == "Lang" & ROIMask == "LHLang"), "Language network,\nLeft hemisphere",
ifelse((localizer == "MD" & ROIMask == "MDLeft"), "Multiple demand network,\nLeft hemisphere","ToMCustom")
)))))
mystats$localizerLabel <- factor(mystats$localizerLabel, levels=c("Theory of mind network,\nRight hemisphere",
"Language network, \nRight hemisphere",
"Multiple demand network,\nRight hemisphere",
"Language network,\nLeft hemisphere",
"Multiple demand network,\nLeft hemisphere"
))
#Graphing function!
makeCompositeBar = function(plotData,ylow=-0.4,yhigh=3, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_AllRegions_', plotData$task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(0, 1, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~localizerLabel) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())   # Optional, remove for RHLang and ToMCustom since we want the legend there...
# + theme(legend.position="none")
ggsave(filename=myfi, width=10, height=4)
}
#Localizer averages only, regular condition assignment
setwd(figfolder)
mylocs = mystats %>%
filter(ROIName == 'average\nacross\nfROIs') %>%
filter(contrastName %in% c('joke','lit', 'joke-lit')) %>%
filter(localizer != "Cloudy")
makeCompositeBar(filter(mylocs, contrastName == 'joke' | contrastName == 'lit'))
#OKAY. Also, Ev would like a line graph below, showing how *signal change* Jokes > Nonjokes in each system
#compares across experiments. Let's do it.
makeCompositeLine = function(plotData,ylow=-0.1,yhigh=0.6, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_EffectSizeLine_', plotData$task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, color=Experiment)) +
geom_errorbar(aes(ymin=bootdown, ymax=bootup, colour=factor(Experiment)), width=.05, position=position_dodge(.15)) +
geom_point(stat="identity", position=position_dodge(.15)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(0, 0.5, 0.25))+
xlab('') +
ylab(str_wrap('% signal change Joke > Non-Joke', width=18)) +
scale_color_manual(name="", values=mycolors) +
facet_grid(~localizerLabel) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme(axis.text.x=element_blank(), axis.ticks.x=element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=9, height=2)
}
#Localizer averages only, regular condition assignment (will add lines between manually)
makeCompositeLine(filter(mylocs, contrastName == 'joke-lit'))
########################
#Figure 4 - TOM with custom by-person assignments
########################
########################
#mystats[mystats$Group == 'ToMCustom',]$Group <- "ToM"
ToMCustom = filter(mystats, ROIMask == 'ToM', task == 'JokesCustom', localizer == "ToM")
ToMCustom$ROIName = factor(ToMCustom$ROIName, levels = c("average\nacross\nfROIs",
"DMPFC", "LTPJ", "MMPFC",
"PC","RTPJ","VMPFC", "RSTS"))
ToMCustom = arrange(ToMCustom, ROIName)
makeRegionsBar = function(plotData,ylow=-0.5,yhigh=2.25, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
nROI = length(unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel)[c(1,3,2)])
myfi = paste('composite_', plotData$ROIMask[2], '_', plotData$localizer[2], '_', plotData$task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 2, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~ROIName, scale='free_x', space='free_x')+
theme_bw() +
theme(legend.key = element_blank()) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank()) +
theme(legend.position="none")
ggsave(filename=myfi, width=nROI+1, height=3)
}
makeRegionsBar(ToMCustom)
#####################################################
#
# Figures for the Supplemental - parcel by parcel graphs, for each system on the Jokes > Non-Jokes contrast
# This uses the same makeRegionsBar function, just need to organize and prettify each system here; stealing code from the original figs script
#####################################################
mystats <- mystats %>%
mutate(ROIGroup = ifelse((ROIName == "average\nacross\nfROIs"), 1, 2))
#Subsets & Ordering (elaborate code, probably can condense these; ggplot is finicky at orders)
#RHLang
RHLang = filter(mystats, ROIMask == 'RHLang', task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
RHLang$ROIName = factor(RHLang$ROIName, levels = c("average\nacross\nfROIs",
"RIFGorb","RIFG","RMFG",
"RAntTemp","RPostTemp","RAngG"))
RHLang = arrange(RHLang, ROIName)
RHLang = arrange(RHLang, ROIGroup)
makeRegionsBar(RHLang)
#LHLang
LHLang = filter(mystats, ROIMask == 'LHLang', task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
LHLang$ROIName = factor(LHLang$ROIName, levels = c("average\nacross\nfROIs",
"LIFGorb","LIFG","LMFG",
"LAntTemp","LPostTemp","LAngG"))
LHLang = arrange(LHLang, ROIName)
LHLang = arrange(LHLang, ROIGroup)
makeRegionsBar(LHLang)
#MDLeft
MDLeft = filter(mystats, ROIMask == 'MDLeft', task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
MDLeft$ROIName = factor(MDLeft$ROIName, levels = c("average\nacross\nfROIs",
"LIFGop","LMFG", "LMFGorb", "LPrecG",
"LInsula","LSMA","LParInf", "LParSup", "LACC"))
MDLeft = arrange(MDLeft, ROIName)
MDLeft = arrange(MDLeft, ROIGroup)
makeRegionsBar(MDLeft)
#MDRight
MDRight = filter(mystats, ROIMask == 'MDRight', task == 'Jokes', (contrastName == 'joke' | contrastName == 'lit'))
MDRight$ROIName = factor(MDRight$ROIName, levels = c("average\nacross\nfROIs",
"RIFGop","RMFG", "RMFGorb", "RPrecG",
"RInsula","RSMA","RParInf", "RParSup", "RACC"))
MDRight = arrange(MDRight, ROIName)
MDRight = arrange(MDRight, ROIGroup)
makeRegionsBar(MDRight)
#ToM
ToM = filter(mystats, ROIMask == 'ToM', task == 'Jokes', localizer == 'ToM', (contrastName == 'joke' | contrastName == 'lit'))
ToM$ROIName = factor(ToM$ROIName, levels = c("average\nacross\nfROIs",
"DMPFC", "LTPJ", "MMPFC",
"PC","RTPJ","VMPFC", "RSTS"))
ToM = arrange(ToM, ROIName)
ToM = arrange(ToM, ROIGroup)
makeRegionsBar(ToM)
#Cloudy!
ToMCloudy = filter(mystats, ROIMask == 'ToM', task == 'Jokes', localizer == 'Cloudy', (contrastName == 'joke' | contrastName == 'lit'))
ToMCloudy$ROIName = factor(ToMCloudy$ROIName, levels = c("average\nacross\nfROIs",
"DMPFC", "LTPJ", "MMPFC",
"PC","RTPJ","VMPFC", "RSTS"))
ToMCloudy = arrange(ToMCloudy, ROIName)
ToMCloudy = arrange(ToMCloudy, ROIGroup)
makeRegionsBar(ToMCloudy, mycolors = c("gray60", "gray60"), ylow=-1)
##AND NOW ALL THE SAME WITH CUSTOM RATINGS
#RHLangCustom
RHLangCustom = filter(mystats, ROIMask == 'RHLang', task == 'JokesCustom', (contrastName == 'low' | contrastName == 'med' | contrastName == 'high'))
RHLangCustom$ROIName = factor(RHLangCustom$ROIName, levels = c("average\nacross\nfROIs",
"RIFGorb","RIFG","RMFG",
"RAntTemp","RPostTemp","RAngG"))
RHLangCustom = arrange(RHLangCustom, ROIName)
RHLangCustom = arrange(RHLangCustom, ROIGroup)
makeRegionsBar(RHLangCustom)
#LHLangCustom
LHLangCustom = filter(mystats, ROIMask == 'LHLang', task == 'JokesCustom', (contrastName == 'low' | contrastName == 'med' | contrastName == 'high'))
LHLangCustom$ROIName = factor(LHLangCustom$ROIName, levels = c("average\nacross\nfROIs",
"LIFGorb","LIFG","LMFG",
"LAntTemp","LPostTemp","LAngG"))
LHLangCustom = arrange(LHLangCustom, ROIName)
LHLangCustom = arrange(LHLangCustom, ROIGroup)
makeRegionsBar(LHLangCustom)
#MDLeftCustom
MDLeftCustom = filter(mystats, ROIMask == 'MDLeft', task == 'JokesCustom', (contrastName == 'low' | contrastName == 'med' | contrastName == 'high'))
MDLeftCustom$ROIName = factor(MDLeftCustom$ROIName, levels = c("average\nacross\nfROIs",
"LIFGop","LMFG", "LMFGorb", "LPrecG",
"LInsula","LSMA","LParInf", "LParSup", "LACC"))
MDLeftCustom = arrange(MDLeftCustom, ROIName)
MDLeftCustom = arrange(MDLeftCustom, ROIGroup)
makeRegionsBar(MDLeftCustom)
#MDRightCustom
MDRightCustom = filter(mystats, ROIMask == 'MDRight', task == 'JokesCustom', (contrastName == 'low' | contrastName == 'med' | contrastName == 'high'))
MDRightCustom$ROIName = factor(MDRightCustom$ROIName, levels = c("average\nacross\nfROIs",
"RIFGop","RMFG", "RMFGorb", "RPrecG",
"RInsula","RSMA","RParInf", "RParSup", "RACC"))
MDRightCustom = arrange(MDRightCustom, ROIName)
MDRightCustom = arrange(MDRightCustom, ROIGroup)
makeRegionsBar(MDRightCustom)
save(mystats, file='mystats.RData')
