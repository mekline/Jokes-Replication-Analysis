#  group_by(categoryLabel)%>%
#  summarise(sterrRes = sterr(meanResponse))
#toPlotResp = merge(toPlotResp, toStr)
#toPlotResp$se_up <- toPlotResp$mean + toPlotResp$sterr
#toPlotResp$se_down <- toPlotResp$mean - toPlotResp$sterr
tobootUp = avgResponse %>%
group_by(categoryLabel)%>%
summarise(bootup = bootup(meanResponse))
tobootDown = avgResponse %>%
group_by(categoryLabel)%>%
summarise(bootdown = bootdown(meanResponse))
toPlotResp = merge(toPlotResp, tobootUp)
toPlotResp = merge(toPlotResp, tobootDown)
setwd(mywd)
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/")
avgRT_E1 = read.csv('avgRT_Behavioral_Exp1.csv')
avgResponse_E1 = read.csv('avgResponse_Behavioral_Exp1.csv')
allSigChange_E1 = read.csv('allSigChange_Exp1.csv')
allSigChange_E1 = allSigChange_E1 %>%
mutate(task = ifelse((contrastName == 'joke') | (contrastName == 'lit')| (contrastName == 'joke-lit'),
'Jokes', 'JokesCustom')) %>%
mutate(Experiment = 'Experiment 1')
allSigChange = allSigChange %>%
select(-one_of(c('participants','ID'))) %>%
mutate(Experiment = 'Replication')
avgRT_E1 = avgRT_E1 %>%
mutate(ID = newSubjectName) %>%
mutate(Experiment = 'Experiment 1') %>%
select(-newSubjectName)
avgResponse_E1 = avgResponse_E1 %>%
mutate(ID = newSubjectName) %>%
mutate(Experiment = 'Experiment 1') %>%
select(-newSubjectName)
avgRT = mutate(avgRT, Experiment = 'Replication')
avgResponse <- mutate(avgResponse, Experiment = 'Replication')
#And merge the datasets
avgRT_E1$category <- as.factor(avgRT_E1$category)
avgResponse_E1$category <- as.factor(avgResponse_E1$category)
avgRT_E1$ID <- as.factor(avgRT_E1$ID)
avgResponse_E1$ID <- as.factor(avgResponse_E1$ID)
avgRT_E1$Experiment <- as.factor(avgRT_E1$Experiment)
avgResponse_E1$Experiment <- as.factor(avgResponse_E1$Experiment)
avgRT_E1$meanRT <- as.numeric(as.character(avgRT_E1$meanRT))
avgResponse_E1$meanResponse <- as.numeric(as.character(avgResponse_E1$meanResponse))
#And merge at last!
all_allSignalChange = merge(allSigChange, allSigChange_E1, all.x = TRUE, all.y = TRUE)
all_avgRT = merge(avgRT, avgRT_E1, all.x = TRUE, all.y = TRUE)
all_avgResponse = merge(avgResponse, avgResponse_E1, all.x = TRUE, all.y = TRUE)
#Whoops! RTs should be in milliseconds.
all_avgRT$meanRT <- all_avgRT$meanRT * 1000
##############
##############
#Now we're ready to make some cool graphs!
##############
##############
#Fig 2 - behavioral, RT and funny-ness ratings
#(Borrow code from the single-study behavioral stuffs.)
#Edit! We should be doing bootstrapped 95% confidence intervals instead! calculate them from allSigChange
#then merge into mystats
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
#Make the organized data for ggplot
all_avgRT <- ungroup(all_avgRT)
all_avgResponse <- ungroup(all_avgResponse)
#rename categories
all_avgRT$categoryLabel <- ""
all_avgRT[all_avgRT$category == "joke",]$categoryLabel <- "Jokes"
all_avgRT[all_avgRT$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
all_avgResponse$categoryLabel <- ""
all_avgResponse[all_avgResponse$category == "joke",]$categoryLabel <- "Jokes"
all_avgResponse[all_avgResponse$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
toPlotRT = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(mean = mean(meanRT))
tobootUp = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootup = bootup(meanRT))
tobootDown = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootdown = bootdown(meanRT))
toPlotRT = merge(toPlotRT, tobootUp)
toPlotRT = merge(toPlotRT, tobootDown)
toPlotResp = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(mean = mean(meanResponse))
tobootUp = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootup = bootup(meanResponse))
tobootDown = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootdown = bootdown(meanResponse))
toPlotResp = merge(toPlotResp, tobootUp)
toPlotResp = merge(toPlotResp, tobootDown)
setwd(paste(getwd(), '/analysis_pipeline/figs', sep=''))
ggplot(data=toPlotRT, aes(y=mean, x=categoryLabel, fill = Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(0,1200)) +
scale_y_continuous(breaks = seq(0, 2000, 200))+
xlab('') +
ylab('Response time (milliseconds)') +
scale_fill_manual(name="", values=c("gray35", "gray60")) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme(legend.position="none")
ggsave(filename="composite_E1_rep_behavioralrt.jpg", width=2, height=3)
ggplot(data=toPlotResp, aes(y=mean, x=categoryLabel, fill = Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(1,4)) +
scale_y_continuous(breaks = seq(1, 4, 1))+
xlab('') +
ylab('Average funny-ness rating') +
scale_fill_manual(name="", values=c("gray35", "gray60")) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
ggsave(filename="composite_E1_rep_behavioral.jpg", width=3, height=3)
##############
##############
#Fig 3 - Signal change (system averages only!) in each system, by experiment
toGraph <- all_allSignalChange %>%
filter(ROIName == 'LocalizerAverage') %>%
filter(contrastName %in% c('joke','lit')) %>%
mutate(newSubjName = paste(Experiment, SubjectNumber))
#Next, get the table that we'll be making the graphs from: for each region (including the average region), take all
#the individual signal changes and calculate a mean and a standard error
sterr <- function(mylist){
my_se = sd(mylist)/sqrt(length(mylist))
return(my_se)
}
mystats = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI,toGraph$contrastName, toGraph$Experiment), mean)
names(mystats) = c('Group','Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'themean')
myster = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI,toGraph$contrastName, toGraph$Experiment), sterr)
names(myster) = c('Group','Task', 'ROIName', 'ROI','contrastName', 'Experiment','sterr')
mystats = merge(mystats,myster)
mystats$se_up = mystats$themean + mystats$sterr
mystats$se_down = mystats$themean - mystats$sterr
#Edit! We should be doing bootstrapped 95% confidence intervals instead! calculate them from allSigChange
#then merge into mystats
mybootup = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI, toGraph$contrastName, toGraph$Experiment), bootup)
names(mybootup) = c('Group', 'Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'bootup')
mybootdown = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI, toGraph$contrastName, toGraph$Experiment), bootdown)
names(mybootdown) = c('Group', 'Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'bootdown')
mystats = merge(mystats,mybootup)
mystats = merge(mystats,mybootdown)
#########
# Graphs!
#########
#Select the rows we want for each graph, and order them how we want! For now, localizerAverage will just come first in all sets
mystats$contNo <- 1
mystats[mystats$contrastName == 'joke',]$contNo <- 1
mystats[mystats$contrastName == 'lit',]$contNo <- 2
mystats = arrange(mystats, contNo)
#Changes for prettiness
mystats[mystats$ROIName=="LocalizerAverage",]$ROIName <- "average across fROIs"
mystats$ROIName <- str_wrap(mystats$ROIName, width = 4)
mystats$contrastLabel <- mystats$contrastName
mystats[mystats$contrastName == "joke",]$contrastLabel <- "Jokes\n  "
mystats[mystats$contrastName == "lit",]$contrastLabel <- "Non-jokes\n   "
#XXX START HERE TO SPLIT INTO REG AND CUSTOM (exploratory!) ASSIGNMENTS!!!
# ToMCustom = filter(mystats, Group == 'ToM', Task == 'JokesCustom')
# ToMCustom <- arrange(ToMCustom, contNo)
# ToMCustom <- ToMCustom[order(ToMCustom$ROI),]
# ToMCustom$PresOrder = c(1,2,3,4,5,6,13,14,15,7,8,9,10,11,12,16,17,18,19,20,21, 22, 23, 24)
# ToMCustom <- ToMCustom[order(ToMCustom$PresOrder),]
# ToMCustom = arrange(ToMCustom, desc(ROIGroup))
#
#Graphing function!
makeBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_AllRegions_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 1.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~Group, scale='free_x', space='free_x')
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=7, height=3)
}
makeBar(mystats)
makeBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_AllRegions_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 1.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~Group, scale='free_x', space='free_x')
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=9, height=3)
}
makeBar(mystats)
#Fig 4 - Signal changes in ToM with custom ratings, by experiment
toGraph <- all_allSignalChange %>%
filter(contrastName %in% c('joke','lit', 'high', 'med','low')) %>%
mutate(newSubjName = paste(Experiment, SubjectNumber))
sterr <- function(mylist){
my_se = sd(mylist)/sqrt(length(mylist))
return(my_se)
}
mystats = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI,toGraph$contrastName, toGraph$Experiment), mean)
names(mystats) = c('Group','Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'themean')
myster = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI,toGraph$contrastName, toGraph$Experiment), sterr)
names(myster) = c('Group','Task', 'ROIName', 'ROI','contrastName', 'Experiment','sterr')
mystats = merge(mystats,myster)
mystats$se_up = mystats$themean + mystats$sterr
mystats$se_down = mystats$themean - mystats$sterr
#Edit! We should be doing bootstrapped 95% confidence intervals instead! calculate them from allSigChange
#then merge into mystats
mybootup = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI, toGraph$contrastName, toGraph$Experiment), bootup)
names(mybootup) = c('Group', 'Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'bootup')
mybootdown = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI, toGraph$contrastName, toGraph$Experiment), bootdown)
names(mybootdown) = c('Group', 'Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'bootdown')
mystats = merge(mystats,mybootup)
mystats = merge(mystats,mybootdown)
#Select the rows we want for each graph, and order them how we want! For now, localizerAverage will just come first in all sets
mystats$contNo <- 1
mystats[mystats$contrastName == 'joke',]$contNo <- 1
mystats[mystats$contrastName == 'lit',]$contNo <- 2
mystats = arrange(mystats, contNo)
#Changes for prettiness
mystats[mystats$ROIName=="LocalizerAverage",]$ROIName <- "average across fROIs"
mystats$ROIName <- str_wrap(mystats$ROIName, width = 4)
mystats$contrastLabel <- mystats$contrastName
mystats[mystats$contrastName == "joke",]$contrastLabel <- "Jokes\n  "
mystats[mystats$contrastName == "lit",]$contrastLabel <- "Non-jokes\n   "
#Graphing function!
makeBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_AllRegions_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 1.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~Group, scale='free_x', space='free_x')
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=9, height=3)
}
makeBar(mystats)
#Localizer averages only, regular condition assignment
mylocs = mystats %>%
filter(ROIName == 'LocalizerAverage') %>%
filter(contrastName %in% c('joke','lit'))
makeBar(mylocs)
mylocs
mystats
mylocs = mystats %>%
filter(ROIName == 'average\nacross\nfROIs') %>%
filter(contrastName %in% c('joke','lit'))
makeBar(mylocs)
names(mystats)
ToMCustom = filter(mystats, Group == 'ToM', Task == 'JokesCustom')
ToMCustom <- arrange(ToMCustom, contNo)
ToMCustom <- ToMCustom[order(ToMCustom$ROI),]
ToMCustom$PresOrder = c(1,2,3,4,5,6,13,14,15,7,8,9,10,11,12,16,17,18,19,20,21, 22, 23, 24)
ToMCustom <- ToMCustom[order(ToMCustom$PresOrder),]
ToMCustom = arrange(ToMCustom, desc(ROIGroup))
ToMCustom = filter(mystats, Group == 'ToM', Task == 'JokesCustom')
ToMCustom <- arrange(ToMCustom, contNo)
ToMCustom <- ToMCustom[order(ToMCustom$ROI),]
ToMCustom$PresOrder = c(1,2,3,4,5,6,13,14,15,7,8,9,10,11,12,16,17,18,19,20,21, 22, 23, 24)
ToMCustom <- ToMCustom[order(ToMCustom$PresOrder),]
makeBar(ToMCustom)
makeRegionsBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_AllRegions_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 1.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~ROIName, scale='free_x', space='free_x')
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=9, height=3)
}
makeRegionsBar(ToMCustom)
#Fig 4 - Signal changes in ToM with custom ratings, by experiment
ToMCustom
View(mystats)
mystats[mystats$Group == 'ToMCustom']$Group <- "ToM"
ToMCustom = filter(mystats, Group == 'ToM', Task == 'JokesCustom')
ToMCustom <- arrange(ToMCustom, contNo)
ToMCustom <- ToMCustom[order(ToMCustom$ROI),]
ToMCustom$PresOrder = c(1,2,3,4,5,6,13,14,15,7,8,9,10,11,12,16,17,18,19,20,21, 22, 23, 24)
ToMCustom <- ToMCustom[order(ToMCustom$PresOrder),]
makeRegionsBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_AllRegions_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 1.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~ROIName, scale='free_x', space='free_x')
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=9, height=3)
}
makeRegionsBar(ToMCustom)
ToMCustom
mystats
View(mystats)
mystats[mystats$Group == 'ToMCustom']$Group <- "ToM"
mystats[mystats$Group == 'ToMCustom',]$Group <- "ToM"
ToMCustom = filter(mystats, Group == 'ToM', Task == 'JokesCustom')
ToMCustom <- arrange(ToMCustom, contNo)
ToMCustom <- ToMCustom[order(ToMCustom$ROI),]
ToMCustom$PresOrder = c(1,2,3,4,5,6,13,14,15,7,8,9,10,11,12,16,17,18,19,20,21, 22, 23, 24)
ToMCustom <- ToMCustom[order(ToMCustom$PresOrder),]
makeRegionsBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_AllRegions_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 1.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~ROIName, scale='free_x', space='free_x')
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=9, height=3)
}
makeRegionsBar(ToMCustom)
#Fig 4 - Signal changes in ToM with custom ratings, by experiment
ToMCustom$contrastLabel <- factor(ToMCustom$contrastLabel, levels = unique(ToMCustom$contrastLabel)[c(1,3,2)])
makeRegionsBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_AllRegions_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 1.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~ROIName, scale='free_x', space='free_x')
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=9, height=3)
}
makeRegionsBar(ToMCustom)
#Fig 4 - Signal changes in ToM with custom ratings, by experiment
makeRegionsBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_AllRegions_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 1.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~ROIName, scale='free_x', space='free_x')
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=9, height=3)
}
makeRegionsBar(ToMCustom, -0.5, 1.5, c("high\n  "= "gray35", "med\n   "= "gray50", "low\n  "= "gray65")))
makeRegionsBar(ToMCustom, -0.5, 1.5, c("high\n  "= "gray35", "med\n   "= "gray50", "low\n  "= "gray65"))
makeRegionsBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel)[c(1,3,2)])
myfi = paste('composite_AllRegions_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 1.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~ROIName, scale='free_x', space='free_x')
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=9, height=3)
}
makeRegionsBar(ToMCustom, -0.5, 1.5, c("high\n  "= "gray35", "med\n   "= "gray50", "low\n  "= "gray65"))
ToMCustom
makeRegionsBar(ToMCustom)
makeRegionsBar = function(plotData,ylow=-0.5,yhigh=2.5, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel)[c(1,3,2)])
myfi = paste('composite_CustomRatings_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 1.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~ROIName, scale='free_x', space='free_x')
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=9, height=3)
}
makeRegionsBar(ToMCustom)
#Fig 4 - Signal changes in ToM with custom ratings, by experiment
