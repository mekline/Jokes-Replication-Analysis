avgResponse_E1$ID <- as.factor(avgResponse_E1$ID)
avgRT_E1$Experiment <- as.factor(avgRT_E1$Experiment)
avgResponse_E1$Experiment <- as.factor(avgResponse_E1$Experiment)
avgRT_E1$meanRT <- as.numeric(as.character(avgRT_E1$meanRT))
avgResponse_E1$meanResponse <- as.numeric(as.character(avgResponse_E1$meanResponse))
#And merge at last!
all_allSignalChange = merge(allSigChange, allSigChange_E1, all.x = TRUE, all.y = TRUE)
all_avgRT = merge(avgRT, avgRT_E1, all.x = TRUE, all.y = TRUE)
all_avgResponse = merge(avgResponse, avgResponse_E1, all.x = TRUE, all.y = TRUE)
#Whoops! RTs should be in milliseconds.
all_avgRT[all_avgRT$Experiment == 'Experiment 1',]$meanRT <- all_avgRT[all_avgRT$Experiment == 'Experiment 1',]$meanRT * 1000
##############
##############
#Now we're ready to make some cool graphs!
##############
##############
#Fig 2 - behavioral, RT and funny-ness ratings
#(Borrow code from the single-study behavioral stuffs.)
#Edit! We should be doing bootstrapped 95% confidence intervals instead! calculate them from allSigChange
#then merge into mystats
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
#Make the organized data for ggplot
all_avgRT <- ungroup(all_avgRT)
all_avgResponse <- ungroup(all_avgResponse)
#rename categories
all_avgRT$categoryLabel <- ""
all_avgRT[all_avgRT$category == "joke",]$categoryLabel <- "Jokes"
all_avgRT[all_avgRT$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
all_avgResponse$categoryLabel <- ""
all_avgResponse[all_avgResponse$category == "joke",]$categoryLabel <- "Jokes"
all_avgResponse[all_avgResponse$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
toPlotRT = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(mean = mean(meanRT))
tobootUp = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootup = bootup(meanRT))
tobootDown = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootdown = bootdown(meanRT))
toPlotRT = merge(toPlotRT, tobootUp)
toPlotRT = merge(toPlotRT, tobootDown)
toPlotResp = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(mean = mean(meanResponse))
tobootUp = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootup = bootup(meanResponse))
tobootDown = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootdown = bootdown(meanResponse))
toPlotResp = merge(toPlotResp, tobootUp)
toPlotResp = merge(toPlotResp, tobootDown)
setwd(paste(getwd(), '/analysis_pipeline/figs', sep=''))
############ Graph - Reaction time
ggplot(data=toPlotRT, aes(y=mean, x=categoryLabel, fill = Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(0,1200)) +
scale_y_continuous(breaks = seq(0, 2000, 200))+
xlab('') +
ylab('Response time (milliseconds)') +
scale_fill_manual(name="", values=c("gray35", "gray60")) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme(legend.position="none")
ggsave(filename="composite_E1_rep_behavioralrt.jpg", width=2, height=3)
############Graph - Reponse (funniness)
ggplot(data=toPlotResp, aes(y=mean, x=categoryLabel, fill = Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(1,4)) +
scale_y_continuous(breaks = seq(1, 4, 1))+
xlab('') +
ylab('Average funny-ness rating') +
scale_fill_manual(name="", values=c("gray35", "gray60")) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
ggsave(filename="composite_E1_rep_behavioral.jpg", width=3, height=3)
##############
##############
#Fig 3 - Signal change (system averages only!) in each system, by experiment
##############
toGraph <- all_allSignalChange %>%
filter(contrastName %in% c('joke','lit', 'high', 'med','low', 'joke-lit')) %>%
mutate(newSubjName = paste(Experiment, SubjectNumber))
sterr <- function(mylist){
my_se = sd(mylist)/sqrt(length(mylist))
return(my_se)
}
mystats = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI,toGraph$contrastName, toGraph$Experiment), mean)
names(mystats) = c('Group','Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'themean')
myster = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI,toGraph$contrastName, toGraph$Experiment), sterr)
names(myster) = c('Group','Task', 'ROIName', 'ROI','contrastName', 'Experiment','sterr')
mystats = merge(mystats,myster)
mystats$se_up = mystats$themean + mystats$sterr
mystats$se_down = mystats$themean - mystats$sterr
#Edit! We should be doing bootstrapped 95% confidence intervals instead! calculate them from allSigChange
#then merge into mystats
mybootup = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI, toGraph$contrastName, toGraph$Experiment), bootup)
names(mybootup) = c('Group', 'Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'bootup')
mybootdown = aggregate(toGraph$sigChange, by=list(toGraph$Group, toGraph$task, toGraph$ROIName, toGraph$ROI, toGraph$contrastName, toGraph$Experiment), bootdown)
names(mybootdown) = c('Group', 'Task', 'ROIName', 'ROI','contrastName', 'Experiment', 'bootdown')
mystats = merge(mystats,mybootup)
mystats = merge(mystats,mybootdown)
#Select the rows we want for each graph, and order them how we want! For now, localizerAverage will just come first in all sets
mystats$contNo <- 1
mystats[mystats$contrastName == 'joke',]$contNo <- 1
mystats[mystats$contrastName == 'lit',]$contNo <- 2
mystats = arrange(mystats, contNo)
#Changes for prettiness
mystats[mystats$ROIName=="LocalizerAverage",]$ROIName <- "average across fROIs"
mystats$ROIName <- str_wrap(mystats$ROIName, width = 4)
mystats$contrastLabel <- mystats$contrastName
mystats[mystats$contrastName == "joke",]$contrastLabel <- "Jokes\n  "
mystats[mystats$contrastName == "lit",]$contrastLabel <- "Non-Jokes\n   "
mystats$Group <- factor(mystats$Group, levels = c("RHLang", "ToM", "MDRight", "LHLang", "MDLeft", "ToMCustom"))
#Graphing function!
makeBar = function(plotData,ylow=-0.5,yhigh=2, mycolors = c("gray35", "gray60")) {
#freeze factor orders
plotData$ROIName <- factor(plotData$ROIName, levels = unique(plotData$ROIName))
plotData$contrastLabel <- factor(plotData$contrastLabel, levels = unique(plotData$contrastLabel))
myfi = paste('composite_AllRegions_', plotData$Task[2], '.jpg', sep="")#filename
print(myfi)
ggplot(data=plotData, aes(x=contrastLabel, y=themean, fill=Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(ylow,yhigh)) +
scale_y_continuous(breaks = seq(-0.5, 1.5, 0.5))+
xlab('') +
ylab(str_wrap('% signal change over fixation', width=18)) +
scale_fill_manual(name="", values=mycolors) +
facet_grid(~Group, scale='free_x', space='free_x')
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
# Optional, remove for RHLang and ToMCustom since we want the legend there...
#+ theme(legend.position="none")
ggsave(filename=myfi, width=9, height=3)
}
#Localizer averages only, regular condition assignment
mylocs = mystats %>%
filter(ROIName == 'average\nacross\nfROIs') %>%
filter(contrastName %in% c('joke','lit'))
makeBar(mylocs)
avgRT_E1 = read.csv('avgRT_Behavioral_Exp1.csv')
avgResponse_E1 = read.csv('avgResponse_Behavioral_Exp1.csv')
allSigChange_E1 = read.csv('allSigChange_Exp1.csv')
allSigChange_E1 = allSigChange_E1 %>%
mutate(task = ifelse((contrastName == 'joke') | (contrastName == 'lit')| (contrastName == 'joke-lit'),
'Jokes', 'JokesCustom')) %>%
mutate(Experiment = 'Experiment 1')
allSigChange = allSigChange %>%
select(-one_of(c('participants','ID'))) %>%
mutate(Experiment = 'Experiment 2')
avgRT_E1 = avgRT_E1 %>%
mutate(ID = newSubjectName) %>%
mutate(Experiment = 'Experiment 1') %>%
select(-newSubjectName)
avgResponse_E1 = avgResponse_E1 %>%
mutate(ID = newSubjectName) %>%
mutate(Experiment = 'Experiment 1') %>%
select(-newSubjectName)
avgRT = mutate(avgRT, Experiment = 'Experiment 2')
avgResponse <- mutate(avgResponse, Experiment = 'Experiment 2')
#And merge the datasets
avgRT_E1$category <- as.factor(avgRT_E1$category)
avgResponse_E1$category <- as.factor(avgResponse_E1$category)
avgRT_E1$ID <- as.factor(avgRT_E1$ID)
avgResponse_E1$ID <- as.factor(avgResponse_E1$ID)
avgRT_E1$Experiment <- as.factor(avgRT_E1$Experiment)
avgResponse_E1$Experiment <- as.factor(avgResponse_E1$Experiment)
avgRT_E1$meanRT <- as.numeric(as.character(avgRT_E1$meanRT))
avgResponse_E1$meanResponse <- as.numeric(as.character(avgResponse_E1$meanResponse))
#And merge at last!
all_allSignalChange = merge(allSigChange, allSigChange_E1, all.x = TRUE, all.y = TRUE)
all_avgRT = merge(avgRT, avgRT_E1, all.x = TRUE, all.y = TRUE)
all_avgResponse = merge(avgResponse, avgResponse_E1, all.x = TRUE, all.y = TRUE)
#Whoops! RTs should be in milliseconds.
all_avgRT[all_avgRT$Experiment == 'Experiment 1',]$meanRT <- all_avgRT[all_avgRT$Experiment == 'Experiment 1',]$meanRT * 1000
##############
##############
#Now we're ready to make some cool graphs!
##############
##############
#Fig 2 - behavioral, RT and funny-ness ratings
#(Borrow code from the single-study behavioral stuffs.)
#Edit! We should be doing bootstrapped 95% confidence intervals instead! calculate them from allSigChange
#then merge into mystats
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
#Make the organized data for ggplot
all_avgRT <- ungroup(all_avgRT)
all_avgResponse <- ungroup(all_avgResponse)
#rename categories
all_avgRT$categoryLabel <- ""
all_avgRT[all_avgRT$category == "joke",]$categoryLabel <- "Jokes"
all_avgRT[all_avgRT$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
all_avgResponse$categoryLabel <- ""
all_avgResponse[all_avgResponse$category == "joke",]$categoryLabel <- "Jokes"
all_avgResponse[all_avgResponse$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
toPlotRT = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(mean = mean(meanRT))
tobootUp = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootup = bootup(meanRT))
tobootDown = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootdown = bootdown(meanRT))
toPlotRT = merge(toPlotRT, tobootUp)
toPlotRT = merge(toPlotRT, tobootDown)
toPlotResp = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(mean = mean(meanResponse))
tobootUp = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootup = bootup(meanResponse))
tobootDown = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootdown = bootdown(meanResponse))
toPlotResp = merge(toPlotResp, tobootUp)
toPlotResp = merge(toPlotResp, tobootDown)
setwd(paste(getwd(), '/analysis_pipeline/figs', sep=''))
############ Graph - Reaction time
ggplot(data=toPlotRT, aes(y=mean, x=categoryLabel, fill = Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(0,1200)) +
scale_y_continuous(breaks = seq(0, 2000, 200))+
xlab('') +
ylab('Response time (milliseconds)') +
scale_fill_manual(name="", values=c("gray35", "gray60")) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme(legend.position="none")
ggsave(filename="composite_E1_rep_behavioralrt.jpg", width=2, height=3)
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
behavdir = "/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/behavioral_data/Jokes"
#New  - read in the nicely formatted behavioral data we made!
behavdata = read.csv(paste(behavdir, '/all_behavioral_output.csv', sep=''))
#Make sure you have AllSigChange!
View(allSigChange)
#We need to make sure to match up the right participants, so here we add the list order that participants
#were loaded into the ToM initial first-level analyses.
participants = c('168_FED_20161228b_3T2',
'290_FED_20170426a_3T2',
'301_FED_20161217b_3T2',
'366_FED_20161205a_3T2',
'426_FED_20161215c_3T2',
'430_FED_20170426d_3T2',
'498_FED_20170210c_3T2',
'555_FED_20170426c_3T2',
'576_FED_20170414b_3T2',
'577_FED_20170414c_3T2',
'578_FED_20170414d_3T2',
'288_FED_20170412b_3T2',
'334_FED_20161221a_3T2',
'343_FED_20161208a_3T2',
'521_FED_20161228a_3T2',
'551_FED_20170412a_3T2',
'571_FED_20170412c_3T2',
'473_FED_20170210b_3T2',
'520_FED_20161227a_3T2',
'596_FED_20170426b_3T2')
participants = as.data.frame(participants)
participants$SubjectNumber = 1:nrow(participants)
participants$ID = participants$participant
allSigChange <- merge(allSigChange, participants, by=c('SubjectNumber'), all_x=TRUE, all_y=TRUE)
#(This drops any subjects who didn't get included for the Jokes analyses!)
####
# Ratings
####
#Get average ratings per category per participant
behavdata$response <- as.numeric(as.character(behavdata$response))
jokeResponseChange <- behavdata %>%
filter(!is.na(response)) %>%
group_by(ID, category) %>%
summarise(meanResponse = mean(response)) %>%
spread(category, meanResponse) %>%
mutate(meanResponseChange = joke-nonjoke)
####
# Signal change
####
jokeSigChange <- allSigChange %>%
filter(contrastName == 'joke-lit', Group == 'ToM', task == 'Jokes', ROIName == 'LocalizerAverage')
#Merge the datasets!
bb <- merge(jokeResponseChange, jokeSigChange, by=c('ID'))
## REPORT STATS
cor(bb$meanResponseChange, bb$sigChange)
## Added an LM (no random slopes/intercepts! just 1 value/person)
m1 <- lm(sigChange ~ meanResponseChange, data = bb)
m0 <- lm(sigChange ~ 1, data = bb)
anova(m1,m0)
## MAKE PRETTY GRAPH
setwd("./figs")
coef(lm(meanResponseChange ~ sigChange, data = bb))
ggplot(data=bb, aes(y=sigChange, x=meanResponseChange)) +
geom_point() +
geom_smooth(method="lm", se=FALSE) +
scale_y_continuous(limits = c(-0.25, 0.50), breaks = seq(-0.25, 0.50, 0.25)) +
scale_x_continuous(limits = c(0, 1.75), breaks = seq(0, 2, 0.5)) +
xlab('average rating response \n(Jokes - Non-jokes)') +
ylab('avg. % signal change \n(Jokes - Non-jokes)') +
theme_bw() +
ggsave(filename="behav_activation.jpg", width=3, height=3)
######################
#Make the behavioral graphs for basic response times and ratings, (FIG 2)
# Drop NA response
behavdata <- filter(behavdata, !is.na(RT)) %>%
filter(!is.na(response))
####
# RT
####
#Get average RTs per category per participant
avgRT <- behavdata %>%
group_by(ID, category) %>%
summarise(meanRT = mean(RT))
#T test
t.test(meanRT ~ category, data=avgRT)
#Response times are not different by condition
####
# Ratings
####
#Get average ratings per category per participant
behavdata$response <- as.numeric(as.character(behavdata$response))
avgResponse <- behavdata %>%
group_by(ID, category) %>%
summarise(meanResponse = mean(response))
t.test(meanResponse ~ category, data=avgResponse)
#Responses are different by condition! The jokes are funny!
avgRT_E1 = read.csv('avgRT_Behavioral_Exp1.csv')
avgResponse_E1 = read.csv('avgResponse_Behavioral_Exp1.csv')
allSigChange_E1 = read.csv('allSigChange_Exp1.csv')
allSigChange_E1 = allSigChange_E1 %>%
mutate(task = ifelse((contrastName == 'joke') | (contrastName == 'lit')| (contrastName == 'joke-lit'),
'Jokes', 'JokesCustom')) %>%
mutate(Experiment = 'Experiment 1')
allSigChange = allSigChange %>%
select(-one_of(c('participants','ID'))) %>%
mutate(Experiment = 'Experiment 2')
avgRT_E1 = avgRT_E1 %>%
mutate(ID = newSubjectName) %>%
mutate(Experiment = 'Experiment 1') %>%
select(-newSubjectName)
avgResponse_E1 = avgResponse_E1 %>%
mutate(ID = newSubjectName) %>%
mutate(Experiment = 'Experiment 1') %>%
select(-newSubjectName)
avgRT = mutate(avgRT, Experiment = 'Experiment 2')
avgResponse <- mutate(avgResponse, Experiment = 'Experiment 2')
#And merge the datasets
avgRT_E1$category <- as.factor(avgRT_E1$category)
avgResponse_E1$category <- as.factor(avgResponse_E1$category)
avgRT_E1$ID <- as.factor(avgRT_E1$ID)
avgResponse_E1$ID <- as.factor(avgResponse_E1$ID)
avgRT_E1$Experiment <- as.factor(avgRT_E1$Experiment)
avgResponse_E1$Experiment <- as.factor(avgResponse_E1$Experiment)
avgRT_E1$meanRT <- as.numeric(as.character(avgRT_E1$meanRT))
avgResponse_E1$meanResponse <- as.numeric(as.character(avgResponse_E1$meanResponse))
#And merge at last!
all_allSignalChange = merge(allSigChange, allSigChange_E1, all.x = TRUE, all.y = TRUE)
all_avgRT = merge(avgRT, avgRT_E1, all.x = TRUE, all.y = TRUE)
all_avgResponse = merge(avgResponse, avgResponse_E1, all.x = TRUE, all.y = TRUE)
#Whoops! RTs should be in milliseconds.
all_avgRT[all_avgRT$Experiment == 'Experiment 1',]$meanRT <- all_avgRT[all_avgRT$Experiment == 'Experiment 1',]$meanRT * 1000
##############
##############
#Now we're ready to make some cool graphs!
##############
##############
#Fig 2 - behavioral, RT and funny-ness ratings
#(Borrow code from the single-study behavioral stuffs.)
#Edit! We should be doing bootstrapped 95% confidence intervals instead! calculate them from allSigChange
#then merge into mystats
bootup <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.975)[1])
}
bootdown <- function(mylist){
foo <- bootstrap(mylist, 1000, mean)
return(quantile(foo$thetastar, 0.025)[1])
}
#Make the organized data for ggplot
all_avgRT <- ungroup(all_avgRT)
all_avgResponse <- ungroup(all_avgResponse)
#rename categories
all_avgRT$categoryLabel <- ""
all_avgRT[all_avgRT$category == "joke",]$categoryLabel <- "Jokes"
all_avgRT[all_avgRT$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
all_avgResponse$categoryLabel <- ""
all_avgResponse[all_avgResponse$category == "joke",]$categoryLabel <- "Jokes"
all_avgResponse[all_avgResponse$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
toPlotRT = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(mean = mean(meanRT))
tobootUp = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootup = bootup(meanRT))
tobootDown = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootdown = bootdown(meanRT))
toPlotRT = merge(toPlotRT, tobootUp)
toPlotRT = merge(toPlotRT, tobootDown)
toPlotResp = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(mean = mean(meanResponse))
tobootUp = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootup = bootup(meanResponse))
tobootDown = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootdown = bootdown(meanResponse))
toPlotResp = merge(toPlotResp, tobootUp)
toPlotResp = merge(toPlotResp, tobootDown)
setwd(paste(getwd(), '/analysis_pipeline/figs', sep=''))
############ Graph - Reaction time
ggplot(data=toPlotRT, aes(y=mean, x=categoryLabel, fill = Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(0,1200)) +
scale_y_continuous(breaks = seq(0, 2000, 200))+
xlab('') +
ylab('Response time (milliseconds)') +
scale_fill_manual(name="", values=c("gray35", "gray60")) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme(legend.position="none")
ggsave(filename="composite_E1_rep_behavioralrt.jpg", width=2, height=3)
all_avgRT[all_avgRT$Experiment == 'Experiment 2',]$meanRT <- all_avgRT[all_avgRT$Experiment == 'Experiment 2',]$meanRT * 1000
#Make the organized data for ggplot
all_avgRT <- ungroup(all_avgRT)
all_avgResponse <- ungroup(all_avgResponse)
#rename categories
all_avgRT$categoryLabel <- ""
all_avgRT[all_avgRT$category == "joke",]$categoryLabel <- "Jokes"
all_avgRT[all_avgRT$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
all_avgResponse$categoryLabel <- ""
all_avgResponse[all_avgResponse$category == "joke",]$categoryLabel <- "Jokes"
all_avgResponse[all_avgResponse$category == "nonjoke",]$categoryLabel <- "Non-Jokes"
toPlotRT = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(mean = mean(meanRT))
tobootUp = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootup = bootup(meanRT))
tobootDown = all_avgRT %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootdown = bootdown(meanRT))
toPlotRT = merge(toPlotRT, tobootUp)
toPlotRT = merge(toPlotRT, tobootDown)
toPlotResp = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(mean = mean(meanResponse))
tobootUp = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootup = bootup(meanResponse))
tobootDown = all_avgResponse %>%
group_by(categoryLabel, Experiment)%>%
summarise(bootdown = bootdown(meanResponse))
toPlotResp = merge(toPlotResp, tobootUp)
toPlotResp = merge(toPlotResp, tobootDown)
setwd(paste(getwd(), '/analysis_pipeline/figs', sep=''))
############ Graph - Reaction time
ggplot(data=toPlotRT, aes(y=mean, x=categoryLabel, fill = Experiment)) +
geom_bar(position=position_dodge(), stat="identity") +
geom_errorbar(aes(ymin=bootdown, ymax=bootup), colour="black", width=.1, position=position_dodge(.9)) +
coord_cartesian(ylim=c(0,1200)) +
scale_y_continuous(breaks = seq(0, 2000, 200))+
xlab('') +
ylab('Response time (milliseconds)') +
scale_fill_manual(name="", values=c("gray35", "gray60")) +
theme_bw() +
theme(legend.key = element_blank()) +
theme(strip.background = element_blank()) +
theme(legend.position="none")
ggsave(filename="composite_E1_rep_behavioralrt.jpg", width=2, height=3)
mystats$Group <- factor(mystats$Group, levels = c("ToM", "RHLang", "MDRight", "LHLang", "MDLeft", "ToMCustom"))
#Localizer averages only, regular condition assignment
mylocs = mystats %>%
filter(ROIName == 'average\nacross\nfROIs') %>%
filter(contrastName %in% c('joke','lit'))
makeBar(mylocs)
ggplot(data=loctaskstats, aes(x=ROIName, y=themean, fill=taskType)) +
geom_bar(position=position_dodge(), stat="identity") +
xlab('') +
ylab(str_wrap('% signal change, Crit - Control', width=18)) +
facet_grid(~Group, scale='free_x', space='free_x')
theme_bw() +
theme(legend.key = element_blank()) +
theme(text = element_text(size = 40)) +
theme(strip.background = element_blank()) +
theme(strip.text = element_blank())
