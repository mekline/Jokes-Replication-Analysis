rm(list = ls())
library(bootstrap)
library(dplyr)
library(tidyr)
library(ggplot2)
library(stringr)
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
meansig_outputs_folder = '/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/meansignal_outputs/'
########
#READ IN DATA
########
#New method: Read in the raw data from all_meansignal, that's much easier! Then condition on the
#column labeled fROIs to assign names appropriately. NOTE that this now takes care of reading
#in the localizer-to-localizer ones too, to facilitate making the supplemental materials.
allSigChange = read.csv(paste(meansig_outputs_folder, 'all_mean_signal_outputs.csv', sep=''))
#FOR NOW: Make a choice whether to do all analyses with top 50 voxels or top 10% voxels
allSigChange = filter(allSigChange, ind_selection_method == 'Top10Percent')
#(This can be changed to 'Top50Voxels' to see results with that fROI selection procedure
# List contrast and ROI names so it's not just numbers!!!!! (This ordering comes from the
# standard ordering produced by the 2nd level analyses; we'll arrange differently in the plots)
RHLangROI.Names = c('RPost Temp', 'RAnt Temp', 'RAngG', 'RIFG',      'RMFG',     'RIFG orb');
LangROI.Names = c('LPost Temp', 'LAnt Temp', 'LAngG', 'LIFG',      'LMFG',     'LIFG orb');
MDROI.Names = c('LIFG op',  'RIFG op', 'LMFG',    'RMFG',    'LMFG orb',
'RMFG orb', 'LPrecG', 'RPrecG',  'LInsula', 'RInsula',
'LSMA',    'RSMA',   'LPar Inf', 'RPar Inf', 'LPar Sup',
'RPar Sup', 'LACC',   'RACC');
ToMROI.Names = c('DM PFC', 'LTPJ',  'MM PFC', 'PC',
'RTPJ',  'VM PFC', 'RSTS');
normal.contrasts = c('joke', 'lit', 'joke-lit')
custom.contrasts = c('low','med','high', 'linear') #Bug solved! I didn't record 'other' (no response) in the toolbox output this time. NBD.
lang.contrasts = c('S','N','S-N')
MD.contrasts = c('H','E','H-E')
ToM.contrasts = c('bel','pho','bel-pho')
#Split the data into groups by fROIs, and rename them as appropriate
RHLang_sigs = data.frame(NULL)
LHLang_sigs = data.frame(NULL)
MD_sigs = data.frame(NULL)
ToM_sigs = data.frame(NULL)
RHLang_sigs = allSigChange %>%
filter(fROIs == 'RHLfROIs')%>%
mutate(ROIName = RHLangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'RHLang') %>%
ungroup()
LHLang_sigs = allSigChange %>%
filter(fROIs == 'LangfROIs')%>%
mutate(ROIName = LangROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
lang.contrasts[Contrast]))) %>%
mutate(Group = 'LHLang') %>%
ungroup()
MD_sigs = allSigChange %>%
filter(fROIs == 'MDfROIs')%>%
mutate(ROIName = MDROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
MD.contrasts[Contrast]))) %>%
mutate(Group = ifelse(ROI %%2 == 1, 'MDLeft','MDRight')) %>%
ungroup()
ToM_sigs = allSigChange %>%
filter(fROIs == 'ToMfROIS')%>% ##Typo in all the filenames!
mutate(ROIName = ToMROI.Names[ROI]) %>%
group_by(task)%>%
mutate(contrastName = ifelse(task == 'Jokes', normal.contrasts[Contrast],
ifelse(task == 'JokesCustom', custom.contrasts[Contrast],
ToM.contrasts[Contrast]))) %>%
mutate(Group = 'ToM') %>%
ungroup()
#And stick it all back together!!
allSigChange = rbind(RHLang_sigs, LHLang_sigs, MD_sigs, ToM_sigs)
#In addition to the by-region signal changes, we are going to give each person an average signal change value for each localizer, each task
avgSigChange = aggregate(allSigChange$sigChange, by=list(allSigChange$Group,allSigChange$task, allSigChange$SubjectNumber,allSigChange$contrastName), mean)
names(avgSigChange) = c('Group', 'task', 'SubjectNumber', 'contrastName','sigChange')
avgSigChange$ROIName = 'LocalizerAverage'
avgSigChange$ROI = 0
allSigChange <- allSigChange %>%
dplyr::select(one_of(c('Group', 'task', 'ROIName', 'ROI','SubjectNumber', 'contrastName','sigChange')))
allSigChange <- rbind(allSigChange, avgSigChange)
#NOTE: Later scripts require this allSigChange object to be loaded into memory, run this script to here if it's missing
#This rebuilds the t tests that spmss spits out from the individual signal change values (reproduced here from ind.
#signal change values so mk can track how those are done/feed into other analyses)
library(tidyr)
library(dplyr)
library(pwr)
#Set wd!
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
#Make sure allSigChange is loaded. If it's not, run 2figs_resp_jokes.R to at least line 108
View(allSigChange)
#For the replication, commenting this out, we'll find out in a minute if any localizer-to-localizer
#measurements are not robust enough
#New 10/12: Localizer analysis shows that VMPFC localizer doesn't come out in this dataset (replication/study 2), so DONT remove it from
#the joke-lit tests for ToM and ToM custom
#Replication: Nothing looks like it should be left out yet!
#allSigChange = allSigChange %>%
#  filter(!(Group == 'ToM' & ROIName =='VMPFC')) %>%
#  filter(!(Group == 'ToMCustom' & ROIName =='VMPFC'))
#######
# Calculate T Tests
#######
allTests <- allSigChange %>%
group_by(Group, task)%>%
summarize(familySize = length(unique(ROI))) %>%
merge(allSigChange) %>%
group_by(Group, task, ROI, ROIName, contrastName, familySize) %>%
summarise(t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value) %>%
ungroup()%>%
group_by(Group, contrastName)%>%
mutate(p.adj = p.adjust(p, method="fdr", n=familySize[1]))%>%
ungroup()
View(allTests)
zz = file('localizer_t_tests_all.csv', 'w')
write.csv(allTests, zz, row.names=FALSE)
close(zz)
#Do corrections ever matter?
allTests <- allTests %>%
mutate(sig = p < 0.05) %>%
mutate(sigCor = p.adj < 0.05) %>%
mutate(mismatch = sig != sigCor)
View(filter(allTests,mismatch))
#10/14 Huh, where did the ToM paramfun test go? Here it is again...
allTests %>%
filter(Group == 'ToM', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'ToM', contrastName == 'joke-lit', sig)
#This rebuilds the t tests that spmss spits out from the individual signal change values (reproduced here from ind.
#signal change values so mk can track how those are done/feed into other analyses)
library(tidyr)
library(dplyr)
library(pwr)
#Set wd!
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
#Make sure allSigChange is loaded. If it's not, run 2figs_resp_jokes.R to at least line 108
View(allSigChange)
#For the replication, commenting this out, we'll find out in a minute if any localizer-to-localizer
#measurements are not robust enough
#New 10/12: Localizer analysis shows that VMPFC localizer doesn't come out in this dataset (replication/study 2), so DONT remove it from
#the joke-lit tests for ToM and ToM custom
#Replication: Nothing looks like it should be left out yet!
#allSigChange = allSigChange %>%
#  filter(!(Group == 'ToM' & ROIName =='VMPFC')) %>%
#  filter(!(Group == 'ToMCustom' & ROIName =='VMPFC'))
#######
# Calculate T Tests
#######
allTests <- allSigChange %>%
group_by(Group, task)%>%
summarize(familySize = length(unique(ROI))) %>%
merge(allSigChange) %>%
group_by(Group, task, ROI, ROIName, contrastName, familySize) %>%
summarise(t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value) %>%
ungroup()%>%
group_by(Group, contrastName)%>%
mutate(p.adj = p.adjust(p, method="fdr", n=familySize[1]))%>%
ungroup()
View(allTests)
zz = file('localizer_t_tests_all.csv', 'w')
write.csv(allTests, zz, row.names=FALSE)
close(zz)
########
# Report those T tests like we want for the paper
########
#Do corrections ever matter?
allTests <- allTests %>%
mutate(sig = p < 0.05) %>%
mutate(sigCor = p.adj < 0.05) %>%
mutate(mismatch = sig != sigCor)
View(filter(allTests,mismatch))
#In the replication set, one mismatch: Nonwords over fixation in the linguistic task, LIFG orb, is
#significant before but not after correction. We don't care about this bc the interesting thing from
#that task is Sentences - Nonwords.
#Convention: when all tests go one way, report them together as follows:
reportTests <- function(ts, ps){
if (all(ps > 0.05)){
paste('all insig, ts <', max(ts), 'ps>', min(ps))
} else if (all(ps < 0.05)){
paste('all sig, ts >', min(ts), 'ps<', max(ps))
} else {
'explore...'
}
}
###
#RESP LOCALIZER
allTests %>%
filter(Group == 'LHLang', task == 'Lang', contrastName == 'S-N') %>%
summarise(n(), sum(sig), reportTests(t,p)) #Convention: when all significant, report the largest p
allTests %>%
filter(Group == 'RHLang', task == 'Lang', contrastName == 'S-N') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'MDLeft', task == 'MD', contrastName == 'H-E') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'MDRight', task == 'MD', contrastName == 'H-E') %>%
summarise(n(), sum(sig), reportTests(t,p)) #Orig found a surprise nonsig, but not in the replication
#(Note, in the orig we evaluated MD localizer with non-sent, but now we have participants with 2 localizer sessions!)
allTests %>%
filter(Group == 'ToM', task == 'ToM', contrastName == 'bel-pho') %>%
summarise(n(), sum(sig), reportTests(t,p))
###
#RESP JOKES
### RHLang
#Jokes and Nonjokes both activate, and this time differences! RAngG is nonsignificant
allTests %>%
filter(Group == 'RHLang', task == 'Jokes', contrastName == 'joke') %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'RHLang', contrastName == 'joke', !sig)
filter(allTests, Group == 'RHLang', contrastName == 'joke', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'RHLang', task == 'Jokes', contrastName == 'lit') %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'RHLang', contrastName == 'lit', !sig)
filter(allTests, Group == 'RHLang', contrastName == 'lit', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'RHLang', task == 'Jokes', contrastName == 'joke-lit') %>%
summarise(n(), sum(sig), reportTests(t,p))
### LHLang
#Jokes and Nonjokes both activate, and this time there's differences?!
allTests %>%
filter(Group == 'LHLang', task == 'Jokes', contrastName == 'joke') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'LHLang', task == 'Jokes', contrastName == 'lit') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'LHLang', task == 'Jokes', contrastName == 'joke-lit') %>%
summarise(n(), sum(sig), reportTests(t,p))
### RHMD
allTests %>%
filter(Group == 'MDRight', task == 'Jokes', contrastName == 'joke') %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDRight', contrastName == 'joke', !sig)
allTests %>%
filter(Group == 'MDRight', task == 'Jokes',  contrastName == 'lit') %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDRight', contrastName == 'lit', !sig)
allTests %>%
filter(Group == 'MDRight', task == 'Jokes', contrastName == 'joke-lit') %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDRight', contrastName == 'joke-lit', !sig)
filter(allTests, Group == 'MDRight', contrastName == 'joke-lit', sig) %>%
summarise(n(), sum(sig), reportTests(t,p))
###LHMD
allTests %>%
filter(Group == 'MDLeft', task == 'Jokes', contrastName == 'joke') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'MDLeft', task == 'Jokes', contrastName == 'lit') %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'MDLeft', contrastName == 'lit', !sig)
allTests %>%
filter(Group == 'MDLeft', contrastName == 'joke-lit') %>%
summarise(n(), sum(sig), reportTests(t,p))
### ToM
# Interesting activations!
allTests %>%
filter(Group == 'ToM', task =='Jokes', contrastName == 'joke') %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'ToM', contrastName == 'joke', sig)
allTests %>%
filter(Group == 'ToM', task =='Jokes', contrastName == 'lit') %>%
summarise(n(), sum(sig), reportTests(t,p))
filter(allTests, Group == 'ToM', contrastName == 'lit', sig)
allTests %>%
filter(Group == 'ToM', task =='Jokes', contrastName == 'joke-lit') %>%
summarise(n(), sum(sig), reportTests(t,p))
#07/10/17 Where DID the paramfun go?  7/27 I found it! Whoops, and it has a different name in Study 1 and 2, which could cause problems...
#10/14 Huh, where did the ToM paramfun test go? Here it is again...
allTests %>%
filter(Group == 'ToM', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
setwd("~/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
allTests %>%
filter(Group == 'RHLang', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'LHLang', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'RMD', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'MDRight', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
allTests %>%
filter(Group == 'MDLeft', task == 'JokesCustom', contrastName == 'linear') %>%
summarise(n(), sum(sig), reportTests(t,p))
cohens_d <- function(x, y) {
lx <- length(x)- 1
ly <- length(y)- 1
md  <- abs(mean(x) - mean(y))        ## mean difference (numerator)
csd <- lx * var(x) + ly * var(y)
csd <- csd/(lx + ly)
csd <- sqrt(csd)                     ## common sd computation
cd  <- md/csd                        ## cohen's d
}
forPower <- allSigChange %>%
filter(Group == 'ToM', contrastName == 'joke-lit') %>%
filter(ROIName %in% c('RTPJ','LTPJ','PC','MMPFC') ) %>%
group_by(ROIName)%>%
summarise(m = mean(sigChange), sd = sd(sigChange), t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value)
################ Exploratory analysis on Study 1: power analysis
cohens_d <- function(x, y) {
lx <- length(x)- 1
ly <- length(y)- 1
md  <- abs(mean(x) - mean(y))        ## mean difference (numerator)
csd <- lx * var(x) + ly * var(y)
csd <- csd/(lx + ly)
csd <- sqrt(csd)                     ## common sd computation
cd  <- md/csd                        ## cohen's d
}
forPower <- allSigChange %>%
filter(Group == 'ToM', contrastName == 'joke-lit') %>%
filter(ROIName %in% c('RTPJ','LTPJ','PC','MMPFC') ) %>%
group_by(ROIName)%>%
summarise(m = mean(sigChange), sd = sd(sigChange), t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value)
forPower$n <- 21
forPower$cohens_d <- forPower$m / forPower$sd
ptests <- mapply(pwr.t.test, n=forPower$n, d=forPower$cohens_d, sig.level=0.05, alternative='greater')
ptests
forPower
allSigChange$ROIName
forPower <- allSigChange %>%
filter(Group == 'ToM', contrastName == 'joke-lit') %>%
filter(ROIName %in% c('RTPJ','LTPJ','PC','MM PFC') ) %>%
group_by(ROIName)%>%
summarise(m = mean(sigChange), sd = sd(sigChange), t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value)
forPower$n <- 21
forPower$cohens_d <- forPower$m / forPower$sd
ptests <- mapply(pwr.t.test, n=forPower$n, d=forPower$cohens_d, sig.level=0.05, alternative='greater')
ptests
#Assume the smallest effect in ToM regions is the true effect size
effect_est <- min(forPower$cohens_d)
#How many participants do we need for 80% power at p=0.05?
pwr.t.test(d=effect_est, sig.level=0.05, power = 0.80, alternative='greater')
forPower <- allSigChange %>%
filter(Group == 'ToM', contrastName == 'joke-lit') %>%
filter(ROIName %in% c('RTPJ','LTPJ','PC','MM PFC') ) %>%
group_by(ROIName)%>%
summarise(m = mean(sigChange), sd = sd(sigChange), t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value)
forPower$n <- 21
forPower$cohens_d <- forPower$m / forPower$sd
ptests <- mapply(pwr.t.test, n=forPower$n, d=forPower$cohens_d, sig.level=0.05, alternative='greater')
#These effects are powered okay: range 0.587 - 0.856
#UPDATE: Study 2, the effects are powered VERY well, RTPJ, LTPJ, PC are at .92 or higher, MM PFC is at .62
#Assume the smallest effect in ToM regions is the true effect size
effect_est <- min(forPower$cohens_d)
#How many participants do we need for 80% power at p=0.05?
pwr.t.test(d=effect_est, sig.level=0.05, power = 0.80, alternative='greater')
forPower
forPower$n <- 12
forPower$cohens_d <- forPower$m / forPower$sd
ptests <- mapply(pwr.t.test, n=forPower$n, d=forPower$cohens_d, sig.level=0.05, alternative='greater')
ptests
forPower <- allSigChange %>%
filter(Group == 'ToM', contrastName == 'joke-lit') %>%
filter(ROIName %in% c('RTPJ','LTPJ','PC','MM PFC') ) %>%
group_by(ROIName)%>%
summarise(m = mean(sigChange)/2, sd = sd(sigChange), t = t.test(sigChange, mu=0,alt='greater')$statistic,
p = t.test(sigChange, mu=0,alt='greater')$p.value)
forPower$n <- 12
forPower$cohens_d <- forPower$m / forPower$sd
ptests <- mapply(pwr.t.test, n=forPower$n, d=forPower$cohens_d, sig.level=0.05, alternative='greater')
ptests
View(allSigChange)
RHLangtoLang <- filter(allSigChange, Group == "RHLang", task == "Lang", contrastName == 'S' | contrastName == 'N')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangtoLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangtoLang)
anova(m1,m0)
#This takes the individual-subject contrast values and runs some nifty lmer models.  First #many
#lines are reading in the contrasts as in localizer_t_tests, fun stuff starts on line 105
library(tidyr)
library(dplyr)
library(lme4)
#Set wd!
setwd("/Users/mekline/Dropbox/_Projects/Jokes - fMRI/Jokes-Replication-Analysis/analysis_pipeline")
#None of that nonsense, just make sure thw data is loaded in! If not, run 2figs_resp_jokes.R to at least line 108
View(allSigChange)
#########
#EFFECT SIZE CALCULATION! Requested by the journal.  There is no standard way to report effect sizes for linear mixed
#models, so the approach we'll take is to report mean signal change values at the system level.  This is calculated
#over in the figure script (2figs_resp_jokes) since we general those values there.
# Linear mixed Models!
#Plan: Within each system (localizers, and jokes), test for basic localizer condition differences, then do some
#between-system comparisons
RHLangtoLang <- filter(allSigChange, Group == "RHLang", task == "Lang", contrastName == 'S' | contrastName == 'N')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangtoLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangtoLang)
anova(m1,m0)
LHLangtoLang <- filter(allSigChange, Group == "LHLang", task == "Lang", contrastName == 'S' | contrastName == 'N')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLangtoLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLangtoLang)
anova(m1,m0)
MDRtoMD <- filter(allSigChange, Group == "MDRight", task == "MD", contrastName == 'H' | contrastName == 'E')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRtoMD)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRtoMD)
anova(m1,m0)
MDLtoMD <- filter(allSigChange, Group == "MDLeft", task == "MD", contrastName == 'H' | contrastName == 'E')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLtoMD)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLtoMD)
anova(m1,m0)
ToMtoToM <- filter(allSigChange, Group == "ToM", task =='ToM', contrastName == 'bel' | contrastName == 'pho')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToMtoToM)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToMtoToM)
anova(m1,m0)
RHLang <- filter(allSigChange, Group == "RHLang", task == 'Jokes', contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLang)
anova(m1,m0)
summary(m1)
RHLang <- filter(allSigChange, Group == "RHLang", task == 'Jokes', contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLang)
anova(m1,m0)
LHLang <- filter(allSigChange, Group == "LHLang", task == 'Jokes', contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLang)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLang)
anova(m1,m0)
MDRight <- filter(allSigChange, Group == "MDRight", task == 'Jokes', contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRight)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRight)
anova(m1,m0)
MDLeft <- filter(allSigChange, Group == "MDLeft", task == 'Jokes', contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLeft)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLeft)
anova(m1,m0)
ToM <- filter(allSigChange, Group == "ToM", task == 'Jokes', contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToM)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToM)
anova(m1,m0)
ToMCustom <- filter(allSigChange, Group == "ToM", task == 'JokesCustom', contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
ToMCustom$contrastName <- as.factor(ToMCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToMCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = ToMCustom)
anova(m1,m0)
ToM_MDRight <- filter(allSigChange, Group == "ToM" | Group == "MDRight", task == 'Jokes', contrastName == 'joke' | contrastName == 'lit')
m1 <- lmer(sigChange ~ contrastName*Group + (contrastName|ROIName) + (contrastName*Group|SubjectNumber), data = ToM_MDRight)
m0 <- lmer(sigChange ~ contrastName+Group + (contrastName|ROIName) + (contrastName*Group|SubjectNumber), data = ToM_MDRight)
anova(m1,m0)
#hypothesis: large between-system differences eat most of the variance.  Use joke-lit contrast value instead
ToM_MDRight_cont <- filter(allSigChange, Group == "ToM" | Group == "MDRight", task == 'Jokes', contrastName == 'joke-lit')
m1 <- lmer(sigChange ~ Group + (1|ROIName) + (Group|SubjectNumber), data = ToM_MDRight_cont)
m0 <- lmer(sigChange ~ 1 + (1|ROIName) + (Group|SubjectNumber), data = ToM_MDRight_cont)
anova(m1,m0)
ToM_RHLang_cont <- filter(allSigChange, Group == "ToM" | Group == "RHLang", task =='Jokes', contrastName == 'joke-lit')
m1 <- lmer(sigChange ~ Group + (1|ROIName) + (Group|SubjectNumber), data = ToM_RHLang_cont)
m0 <- lmer(sigChange ~ 1 + (1|ROIName) + (Group|SubjectNumber), data = ToM_RHLang_cont)
anova(m1,m0)
ToM_MDLeft_cont <- filter(allSigChange, Group == "ToM" | Group == "MDLeft", task == 'Jokes', contrastName == 'joke-lit')
m1 <- lmer(sigChange ~ Group + (1|ROIName) + (Group|SubjectNumber), data = ToM_MDLeft_cont)
m0 <- lmer(sigChange ~ 1 + (1|ROIName) + (Group|SubjectNumber), data = ToM_MDLeft_cont)
anova(m1,m0)
ToM_LHLang_cont <- filter(allSigChange, Group == "ToM" | Group == "LHLang", task == 'Jokes', contrastName == 'joke-lit')
m1 <- lmer(sigChange ~ Group + (1|ROIName) + (Group|SubjectNumber), data = ToM_LHLang_cont)
m0 <- lmer(sigChange ~ 1 + (1|ROIName) + (Group|SubjectNumber), data = ToM_LHLang_cont)
anova(m1,m0)
RHLCustom <- filter(allSigChange, Group == "RHLang", task == 'JokesCustom', contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
RHLCustom$contrastName <- as.factor(ToMCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangCustom)
anova(m1,m0)
RHLCustom <- filter(allSigChange, Group == "RHLang", task == 'JokesCustom', contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
RHLCustom$contrastName <- as.factor(RHLangCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangCustom)
anova(m1,m0)
RHLCustom <- filter(allSigChange, Group == "RHLang", task == 'JokesCustom', contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
RHLCustom$contrastName <- as.factor(RHLCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLangCustom)
anova(m1,m0)
RHLCustom <- filter(allSigChange, Group == "RHLang", task == 'JokesCustom', contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
RHLCustom$contrastName <- as.factor(RHLCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = RHLCustom)
anova(m1,m0)
LHLCustom <- filter(allSigChange, Group == "LHLang", task == 'JokesCustom', contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
LHLCustom$contrastName <- as.factor(LHLCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = LHLCustom)
anova(m1,m0)
MDRCustom <- filter(allSigChange, Group == "MDRight", task == 'JokesCustom', contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
MDRCustom$contrastName <- as.factor(MDRCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDRCustom)
anova(m1,m0)
MDLCustom <- filter(allSigChange, Group == "MDLeft", task == 'JokesCustom', contrastName == 'low' | contrastName == 'med' | contrastName == 'high')
#Make sure those factors are ordered....
MDLCustom$contrastName <- as.factor(MDLCustom$contrastName)
m1 <- lmer(sigChange ~ contrastName + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLCustom)
m0 <- lmer(sigChange ~ 1 + (contrastName|ROIName) + (contrastName|SubjectNumber), data = MDLCustom)
anova(m1,m0)
